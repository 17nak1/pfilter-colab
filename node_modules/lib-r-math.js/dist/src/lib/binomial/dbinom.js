"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var _general_1 = require("../common/_general");
var deviance_1 = require("../deviance");
var stirling_1 = require("../stirling");
var log = Math.log, log1p = Math.log1p, R_forceint = Math.round;
var ISNAN = Number.isNaN, R_FINITE = Number.isFinite;
var printer = debug('dbinom');
function dbinom_raw(x, n, p, q, give_log) {
    var lf;
    var lc;
    if (p === 0)
        return x === 0 ? _general_1.R_D__1(give_log) : _general_1.R_D__0(give_log);
    if (q === 0)
        return x === n ? _general_1.R_D__1(give_log) : _general_1.R_D__0(give_log);
    if (x === 0) {
        if (n === 0)
            return _general_1.R_D__1(give_log);
        var lc_1 = p < 0.1 ? -deviance_1.bd0(n, n * q) - n * p : n * log(q);
        return _general_1.R_D_exp(give_log, lc_1);
    }
    if (x === n) {
        lc = q < 0.1 ? -deviance_1.bd0(n, n * p) - n * q : n * log(p);
        return _general_1.R_D_exp(give_log, lc);
    }
    if (x < 0 || x > n)
        return _general_1.R_D__0(give_log);
    lc =
        stirling_1.stirlerr(n) -
            stirling_1.stirlerr(x) -
            stirling_1.stirlerr(n - x) -
            deviance_1.bd0(x, n * p) -
            deviance_1.bd0(n - x, n * q);
    lf = _general_1.M_LN_2PI + log(x) + log1p(-x / n);
    return _general_1.R_D_exp(give_log, lc - 0.5 * lf);
}
exports.dbinom_raw = dbinom_raw;
function dbinom(x, n, p, logX) {
    if (logX === void 0) { logX = false; }
    if (ISNAN(x) || ISNAN(n) || ISNAN(p))
        return x + n + p;
    if (p < 0 || p > 1 || _general_1.R_D_negInonint(n))
        return _general_1.ML_ERR_return_NAN(printer);
    _general_1.R_D_nonint_check(logX, x, printer);
    if (x < 0 || !R_FINITE(x))
        return _general_1.R_D__0(logX);
    n = R_forceint(n);
    x = R_forceint(x);
    return dbinom_raw(x, n, p, 1 - p, logX);
}
exports.dbinom = dbinom;
//# sourceMappingURL=dbinom.js.map