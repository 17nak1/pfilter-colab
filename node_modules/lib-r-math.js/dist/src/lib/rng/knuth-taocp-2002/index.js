'use strict';
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var fixup_1 = require("../fixup");
var irng_1 = require("../irng");
var irng_type_1 = require("../irng-type");
var timeseed_1 = require("../timeseed");
var QUALITY = 1009;
var SEED_LEN = 101;
var LL = 37;
var KK = 100;
var TT = 70;
var MM = 1073741824;
function mod_diff(x, y) {
    var d = new Uint32Array(3);
    d[0] = x;
    d[1] = y;
    d[2] = (d[0] - d[1]) & (MM - 1);
    return d[2];
}
function is_odd(x) {
    return x % 2 === 1;
}
var KnuthTAOCP2002 = (function (_super) {
    __extends(KnuthTAOCP2002, _super);
    function KnuthTAOCP2002(_seed) {
        if (_seed === void 0) { _seed = timeseed_1.timeseed(); }
        return _super.call(this, _seed) || this;
    }
    Object.defineProperty(KnuthTAOCP2002.prototype, "KT_pos", {
        get: function () {
            return this.m_seed[100];
        },
        set: function (v) {
            this.m_seed[100] = v;
        },
        enumerable: true,
        configurable: true
    });
    KnuthTAOCP2002.prototype.ran_array = function (aa, n) {
        var i;
        var j;
        for (j = 0; j < KK; j++) {
            aa[j] = this.ran_x[j];
        }
        for (; j < n; j++) {
            aa[j] = mod_diff(aa[j - KK], aa[j - LL]);
        }
        for (i = 0; i < LL; i++, j++) {
            this.ran_x[i] = mod_diff(aa[j - KK], aa[j - LL]);
        }
        for (; i < KK; i++, j++) {
            this.ran_x[i] = mod_diff(aa[j - KK], this.ran_x[i - LL]);
        }
    };
    KnuthTAOCP2002.prototype.ran_arr_cycle = function () {
        this.ran_array(this.ran_arr_buf, QUALITY);
        this.ran_arr_buf[KK] = -1;
    };
    KnuthTAOCP2002.prototype.ran_start = function (_seed) {
        var t;
        var j;
        var x = new Uint32Array(KK + KK - 1);
        var ss = new Uint32Array(1);
        var se = new Uint32Array([_seed]);
        ss[0] = (se[0] + 2) & (MM - 2);
        for (j = 0; j < KK; j++) {
            x[j] = ss[0];
            ss[0] = ss[0] << 1;
            if (ss[0] >= MM) {
                ss[0] = ss[0] - (MM - 2);
            }
        }
        x[1]++;
        for (ss[0] = se[0] & (MM - 1), t = TT - 1; t;) {
            for (j = KK - 1; j > 0; j--) {
                x[j + j] = x[j];
                x[j + j - 1] = 0;
            }
            for (j = KK + KK - 2; j >= KK; j--) {
                x[j - (KK - LL)] = mod_diff(x[j - (KK - LL)], x[j]);
                x[j - KK] = mod_diff(x[j - KK], x[j]);
            }
            if (is_odd(ss[0])) {
                for (j = KK; j > 0; j--) {
                    x[j] = x[j - 1];
                }
                x[0] = x[KK];
                x[LL] = mod_diff(x[LL], x[KK]);
            }
            if (ss[0]) {
                ss[0] = ss[0] >>> 1;
            }
            else {
                t--;
            }
        }
        for (j = 0; j < LL; j++) {
            this.ran_x[j + KK - LL] = x[j];
        }
        for (; j < KK; j++) {
            this.ran_x[j - LL] = x[j];
        }
        for (j = 0; j < 10; j++) {
            this.ran_array(x, KK + KK - 1);
        }
    };
    KnuthTAOCP2002.prototype.RNG_Init_KT2 = function (_seed) {
        this.ran_start(_seed % 1073741821);
        this.KT_pos = 100;
    };
    KnuthTAOCP2002.prototype.KT_next = function () {
        if (this.KT_pos >= 100) {
            this.ran_arr_cycle();
            this.KT_pos = 0;
        }
        return this.ran_x[this.KT_pos++];
    };
    KnuthTAOCP2002.prototype._setup = function () {
        this._kind = irng_type_1.IRNGType.KNUTH_TAOCP2002;
        this._name = 'Knuth-TAOCP-2002';
        this.qualityBuffer = new ArrayBuffer(QUALITY * 4);
        this.ran_arr_buf = new Uint32Array(this.qualityBuffer);
        var buf = new ArrayBuffer(SEED_LEN * 4);
        this.m_seed = new Uint32Array(buf).fill(0);
        this.ran_x = this.m_seed;
    };
    KnuthTAOCP2002.prototype.internal_unif_rand = function () {
        var KT = 9.31322574615479e-10;
        return fixup_1.fixup(this.KT_next() * KT);
    };
    KnuthTAOCP2002.prototype.init = function (_seed) {
        if (_seed === void 0) { _seed = timeseed_1.timeseed(); }
        var s = new Uint32Array([0]);
        s[0] = _seed;
        for (var j = 0; j < 50; j++) {
            s[0] = 69069 * s[0] + 1;
        }
        this.RNG_Init_KT2(s[0]);
        _super.prototype.init.call(this, _seed);
    };
    Object.defineProperty(KnuthTAOCP2002.prototype, "seed", {
        get: function () {
            return Array.from(this.m_seed);
        },
        set: function (_seed) {
            if (_seed.length > this.m_seed.length || _seed.length === 0) {
                this.init(timeseed_1.timeseed());
                return;
            }
            this.m_seed.set(_seed);
        },
        enumerable: true,
        configurable: true
    });
    return KnuthTAOCP2002;
}(irng_1.IRNG));
exports.KnuthTAOCP2002 = KnuthTAOCP2002;
//# sourceMappingURL=index.js.map