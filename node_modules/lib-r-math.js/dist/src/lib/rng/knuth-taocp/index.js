'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var fixup_1 = require("../fixup");
var irng_1 = require("../irng");
var irng_type_1 = require("../irng-type");
var timeseed_1 = require("../timeseed");
var taocp_1997_init_1 = require("./taocp-1997-init");
var MM = 1 << 30;
var KK = 100;
var LL = 37;
var QUALITY = 1009;
var qualityBuffer = new ArrayBuffer(QUALITY * 4);
var ran_arr_buf = new Uint32Array(qualityBuffer);
var KT = 9.31322574615479e-10;
var mod_diff = function (x, y) { return (x - y) & (MM - 1); };
var SEED_LEN = 101;
var KnuthTAOCP = (function (_super) {
    __extends(KnuthTAOCP, _super);
    function KnuthTAOCP(_seed) {
        if (_seed === void 0) { _seed = timeseed_1.timeseed(); }
        return _super.call(this, _seed) || this;
    }
    Object.defineProperty(KnuthTAOCP.prototype, "KT_pos", {
        get: function () {
            return this.m_seed[100];
        },
        set: function (v) {
            this.m_seed[100] = v;
        },
        enumerable: true,
        configurable: true
    });
    KnuthTAOCP.prototype.fixupSeeds = function () {
        if (this.KT_pos <= 0)
            this.KT_pos = 100;
        var s = this.m_seed.slice(0, 100);
        if (s.find(function (v) { return !!v; }) === undefined)
            this.init(timeseed_1.timeseed());
        return;
    };
    KnuthTAOCP.prototype.KT_next = function () {
        var s = this.m_seed;
        if (this.KT_pos >= 100) {
            this.ran_arr_cycle();
            this.KT_pos = 0;
        }
        return s[this.KT_pos++];
    };
    KnuthTAOCP.prototype.RNG_Init_R_KT = function (_seed) {
        this.m_seed.set(taocp_1997_init_1.TAOCP1997init(_seed % 1073741821));
        this.KT_pos = 100;
        this.fixupSeeds();
    };
    KnuthTAOCP.prototype.ran_arr_cycle = function () {
        this.ran_array(ran_arr_buf, QUALITY);
        ran_arr_buf[KK] = -1;
        return ran_arr_buf[0];
    };
    KnuthTAOCP.prototype.ran_array = function (aa, n) {
        var i;
        var j;
        var ran_x = this.m_seed;
        for (j = 0; j < KK; j++)
            aa[j] = ran_x[j];
        for (; j < n; j++)
            aa[j] = mod_diff(aa[j - KK], aa[j - LL]);
        for (i = 0; i < LL; i++, j++)
            ran_x[i] = mod_diff(aa[j - KK], aa[j - LL]);
        for (; i < KK; i++, j++)
            ran_x[i] = mod_diff(aa[j - KK], ran_x[i - LL]);
    };
    KnuthTAOCP.prototype._setup = function () {
        this.buf = new ArrayBuffer(SEED_LEN * 4);
        this._kind = irng_type_1.IRNGType.KNUTH_TAOCP;
        this._name = 'Knuth-TAOCP';
        this.m_seed = new Int32Array(this.buf).fill(0);
    };
    KnuthTAOCP.prototype.init = function (_seed) {
        if (_seed === void 0) { _seed = timeseed_1.timeseed(); }
        var s = new Uint32Array([0]);
        s[0] = _seed;
        for (var j = 0; j < 50; j++) {
            s[0] = 69069 * s[0] + 1;
        }
        this.RNG_Init_R_KT(s[0]);
        _super.prototype.init.call(this, _seed);
    };
    Object.defineProperty(KnuthTAOCP.prototype, "seed", {
        get: function () {
            return Array.from(this.m_seed);
        },
        set: function (_seed) {
            if (_seed.length > this.m_seed.length || _seed.length === 0) {
                this.init(timeseed_1.timeseed());
                return;
            }
            this.m_seed.set(_seed);
        },
        enumerable: true,
        configurable: true
    });
    KnuthTAOCP.prototype.internal_unif_rand = function () {
        return fixup_1.fixup(this.KT_next() * KT);
    };
    return KnuthTAOCP;
}(irng_1.IRNG));
exports.KnuthTAOCP = KnuthTAOCP;
//# sourceMappingURL=index.js.map