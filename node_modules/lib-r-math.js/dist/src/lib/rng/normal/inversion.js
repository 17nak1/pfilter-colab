'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var qnorm_1 = require("../../normal/qnorm");
var mersenne_twister_1 = require("../mersenne-twister");
var inormal_rng_1 = require("./inormal-rng");
var BIG = 134217728;
var isArray = Array.isArray;
var Inversion = (function (_super) {
    __extends(Inversion, _super);
    function Inversion(_rng) {
        if (_rng === void 0) { _rng = new mersenne_twister_1.MersenneTwister(0); }
        return _super.call(this, _rng) || this;
    }
    Inversion.prototype.internal_norm_rand = function () {
        var u1 = this.rng.unif_rand();
        var t = this.rng.unif_rand();
        u1 = new Int32Array([BIG * u1])[0] + t;
        var result = qnorm_1.qnorm(u1 / BIG, 0.0, 1.0, !!1, !!0);
        return isArray(result) ? result[0] : result;
    };
    return Inversion;
}(inormal_rng_1.IRNGNormal));
exports.Inversion = Inversion;
//# sourceMappingURL=inversion.js.map