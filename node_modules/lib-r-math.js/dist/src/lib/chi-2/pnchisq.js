"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var _general_1 = require("../common/_general");
var expm1_1 = require("../exp/expm1");
var lgammafn_sign_1 = require("../gamma/lgammafn_sign");
var logspace_add_1 = require("../gamma/logspace-add");
var pchisq_1 = require("./pchisq");
var sqrt = Math.sqrt, fabs = Math.abs, exp = Math.exp, log = Math.log, fmin2 = Math.min, fmax2 = Math.max, M_LN2 = Math.LN2, M_LN10 = Math.LN10;
var ISNAN = Number.isNaN, R_FINITE = Number.isFinite, DBL_EPSILON = Number.EPSILON, ML_NEGINF = Number.NEGATIVE_INFINITY;
exports.DBL_MAX_EXP = Math.log2(Number.MAX_VALUE);
exports.DBL_MIN_EXP = Math.log2(Number.MIN_VALUE);
var _dbl_min_exp = M_LN2 * exports.DBL_MIN_EXP;
var expm1 = Math.expm1, log1p = Math.log1p;
var printer = debug('pnchisq');
function pnchisq(x, df, ncp, lower_tail, log_p) {
    if (ncp === void 0) { ncp = 0; }
    if (lower_tail === void 0) { lower_tail = true; }
    if (log_p === void 0) { log_p = false; }
    var ans;
    if (ISNAN(x) || ISNAN(df) || ISNAN(ncp)) {
        return NaN;
    }
    if (!R_FINITE(df) || !R_FINITE(ncp)) {
        return _general_1.ML_ERR_return_NAN(printer);
    }
    if (df < 0 || ncp < 0) {
        return _general_1.ML_ERR_return_NAN(printer);
    }
    ans = pnchisq_raw(x, df, ncp, 1e-12, 8 * DBL_EPSILON, 1000000, lower_tail, log_p);
    if (ncp >= 80) {
        if (lower_tail) {
            ans = fmin2(ans, _general_1.R_D__1(log_p));
        }
        else {
            if (ans < (log_p ? -10 * M_LN10 : 1e-10))
                _general_1.ML_ERROR(_general_1.ME.ME_PRECISION, 'pnchisq', printer);
            if (!log_p)
                ans = fmax2(ans, 0.0);
        }
    }
    if (!log_p || ans < -1e-8) {
        return ans;
    }
    printer('   pnchisq_raw(*, log_p): ans=%d => 2nd call, other tail', ans);
    ans = pnchisq_raw(x, df, ncp, 1e-12, 8 * DBL_EPSILON, 1000000, !lower_tail, false);
    return log1p(-ans);
}
exports.pnchisq = pnchisq;
function pnchisq_raw(x, f, theta, errmax, reltol, itrmax, lower_tail, log_p) {
    var lam;
    var x2;
    var f2;
    var term;
    var bound;
    var f_x_2n;
    var f_2n;
    var l_lam = -1;
    var l_x = -1;
    var lamSml;
    var tSml;
    var is_r;
    var is_b;
    var is_it;
    var ans;
    var u;
    var v;
    var t;
    var lt;
    var lu = -1;
    if (x <= 0) {
        if (x === 0 && f === 0) {
            var _L = -0.5 * theta;
            var result = lower_tail ?
                _general_1.R_D_exp(log_p, _L)
                : (log_p ? expm1_1.R_Log1_Exp(_L)
                    : -expm1(_L));
            printer('result1:%d', result);
            return result;
        }
        return _general_1.R_DT_0(lower_tail, log_p);
    }
    if (!R_FINITE(x))
        return _general_1.R_DT_1(lower_tail, log_p);
    if (theta < 80) {
        var ans_1;
        var i = void 0;
        if (lower_tail &&
            f > 0 &&
            log(x) < M_LN2 + 2 / f * (lgammafn_sign_1.lgammafn_sign(f / 2 + 1) + _dbl_min_exp)) {
            var lambda = 0.5 * theta;
            var sum = ML_NEGINF;
            var sum2 = ML_NEGINF;
            var pr = -lambda;
            for (i = 0; i < 110; pr += log(lambda) - log(++i)) {
                sum2 = logspace_add_1.logspace_add(sum2, pr);
                sum = logspace_add_1.logspace_add(sum, pr + pchisq_1.pchisq(x, f + 2 * i, lower_tail, true));
                if (sum2 >= -1e-15) {
                    break;
                }
            }
            ans_1 = sum - sum2;
            printer('pnchisq(x=%d, f=%d, th.=%d); th. < 80, logspace: i=%d, ans=(sum=%d)-(sum2=%d)', x, f, theta, i, sum, sum2);
            return log_p ? ans_1 : exp(ans_1);
        }
        else {
            var lambda = 0.5 * theta;
            var sum = 0;
            var sum2 = 0;
            var pr = exp(-lambda);
            for (i = 0; i < 110; pr *= lambda / ++i) {
                sum2 += pr;
                sum += pr * pchisq_1.pchisq(x, f + 2 * i, lower_tail, false);
                if (sum2 >= 1 - 1e-15)
                    break;
            }
            ans_1 = sum / sum2;
            printer('pnchisq(x=%d, f=%d, theta=%d); theta < 80: i=%d, sum=%d, sum2=%d', x, f, theta, i, sum, sum2);
            return log_p ? log(ans_1) : ans_1;
        }
    }
    printer('pnchisq(x=%d, f=%d, theta=%d >= 80): ', x, f, theta);
    lam = 0.5 * theta;
    lamSml = -lam < _dbl_min_exp;
    if (lamSml) {
        u = 0;
        lu = -lam;
        l_lam = log(lam);
    }
    else {
        u = exp(-lam);
    }
    v = u;
    x2 = 0.5 * x;
    f2 = 0.5 * f;
    f_x_2n = f - x;
    printer('-- v=exp(-th/2)=%d, x/2= %d, f/2= %d', v, x2, f2);
    if (f2 * DBL_EPSILON > 0.125 &&
        fabs((t = x2 - f2)) <
            sqrt(DBL_EPSILON) * f2) {
        lt = (1 - t) * (2 - t / (f2 + 1)) - _general_1.M_LN_SQRT_2PI - 0.5 * log(f2 + 1);
        printer(' (case I) === > ');
    }
    else {
        lt = f2 * log(x2) - x2 - lgammafn_sign_1.lgammafn_sign(f2 + 1);
    }
    printer(' lt= %d', lt);
    tSml = lt < _dbl_min_exp;
    if (tSml) {
        printer(' is very small');
        if (x > f + theta + 5 * sqrt(2 * (f + 2 * theta))) {
            return _general_1.R_DT_1(lower_tail, log_p);
        }
        l_x = log(x);
        ans = term = 0;
        t = 0;
    }
    else {
        t = exp(lt);
        printer(', t=exp(lt)= %d', t);
        term = v * t;
        ans = term;
    }
    var n;
    for (n = 1, f_2n = f + 2, f_x_2n += 2;; n++, f_2n += 2, f_x_2n += 2) {
        printer(' _OL_: n=%d', n);
        if (f_x_2n > 0) {
            bound = t * x / f_x_2n;
            printer(' L10: n=%d; term= %d; bound= %d', n, term, bound);
            is_r = is_it = false;
            if (((is_b = bound <= errmax) && (is_r = term <= reltol * ans)) ||
                (is_it = n > itrmax)) {
                printer('BREAK n=%d %s; bound= %d %s, rel.err= %d %s', n, is_it ? '> itrmax' : '', bound, is_b ? '<= errmax' : '', term / ans, is_r ? '<= reltol' : '');
                break;
            }
        }
        if (lamSml) {
            lu += l_lam - log(n);
            if (lu >= _dbl_min_exp) {
                printer(' n=%d; nomore underflow in u = exp(lu) === > change', n);
                v = u = exp(lu);
                lamSml = false;
            }
        }
        else {
            u *= lam / n;
            v += u;
        }
        if (tSml) {
            lt += l_x - log(f_2n);
            if (lt >= _dbl_min_exp) {
                printer('  n=%d; nomore underflow in t = exp(lt) === > change', n);
                t = exp(lt);
                tSml = false;
            }
        }
        else {
            t *= x / f_2n;
        }
        if (!lamSml && !tSml) {
            term = v * t;
            ans += term;
        }
    }
    if (is_it) {
        printer('pnchisq(x=%d, ..): not converged in %d iter.', x, itrmax);
    }
    printer(' ===  L_End: n=%d; term= %d; bound=%d', n, term, bound);
    return _general_1.R_DT_val(lower_tail, log_p, ans);
}
exports.pnchisq_raw = pnchisq_raw;
//# sourceMappingURL=pnchisq.js.map