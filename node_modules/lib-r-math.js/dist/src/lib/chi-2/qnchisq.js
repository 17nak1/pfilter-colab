"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var _general_1 = require("../common/_general");
var qchisq_1 = require("../chi-2/qchisq");
var pnchisq_1 = require("./pnchisq");
var expm1 = Math.expm1, fmin2 = Math.min;
var DBL_MAX = Number.MAX_VALUE, DBL_MIN = Number.MIN_VALUE, DBL_EPSILON = Number.EPSILON, ISNAN = Number.isNaN, R_FINITE = Number.isFinite, ML_POSINF = Number.POSITIVE_INFINITY;
var printer = debug('_qnchisq');
function qnchisq(p, df, ncp, lower_tail, log_p) {
    if (lower_tail === void 0) { lower_tail = true; }
    if (log_p === void 0) { log_p = false; }
    printer('start');
    var accu = 1e-13;
    var racc = 4 * DBL_EPSILON;
    var Eps = 1e-11;
    var rEps = 1e-10;
    var ux;
    var lx;
    var ux0;
    var nx;
    var pp;
    if (ISNAN(p) || ISNAN(df) || ISNAN(ncp)) {
        return NaN;
    }
    if (!R_FINITE(df)) {
        return _general_1.ML_ERR_return_NAN(printer);
    }
    if (df < 0 || ncp < 0) {
        return _general_1.ML_ERR_return_NAN(printer);
    }
    var rc = _general_1.R_Q_P01_boundaries(lower_tail, log_p, p, 0, ML_POSINF);
    if (rc !== undefined) {
        return rc;
    }
    pp = _general_1.R_D_qIv(log_p, p);
    if (pp > 1 - DBL_EPSILON) {
        return lower_tail ? ML_POSINF : 0.0;
    }
    {
        var b = void 0;
        var c = void 0;
        var ff = void 0;
        b = ncp * ncp / (df + 3 * ncp);
        c = (df + 3 * ncp) / (df + 2 * ncp);
        ff = (df + 2 * ncp) / (c * c);
        ux = b + c * qchisq_1.qchisq(p, ff, lower_tail, log_p);
        if (ux < 0)
            ux = 1;
        ux0 = ux;
    }
    if (!lower_tail && ncp >= 80) {
        if (pp < 1e-10)
            _general_1.ML_ERROR(_general_1.ME.ME_PRECISION, 'qnchisq', printer);
        p = log_p ? -expm1(p) : 0.5 - p + 0.5;
        lower_tail = true;
    }
    else {
        p = pp;
    }
    pp = fmin2(1 - DBL_EPSILON, p * (1 + Eps));
    if (lower_tail) {
        for (; ux < DBL_MAX &&
            pnchisq_1.pnchisq_raw(ux, df, ncp, Eps, rEps, 10000, true, false) < pp; ux *= 2)
            ;
        pp = p * (1 - Eps);
        for (lx = fmin2(ux0, DBL_MAX); lx > DBL_MIN &&
            pnchisq_1.pnchisq_raw(lx, df, ncp, Eps, rEps, 10000, true, false) > pp; lx *= 0.5)
            ;
    }
    else {
        for (; ux < DBL_MAX &&
            pnchisq_1.pnchisq_raw(ux, df, ncp, Eps, rEps, 10000, false, false) > pp; ux *= 2)
            ;
        pp = p * (1 - Eps);
        for (lx = fmin2(ux0, DBL_MAX); lx > DBL_MIN &&
            pnchisq_1.pnchisq_raw(lx, df, ncp, Eps, rEps, 10000, false, false) < pp; lx *= 0.5)
            ;
    }
    if (lower_tail) {
        do {
            nx = 0.5 * (lx + ux);
            if (pnchisq_1.pnchisq_raw(nx, df, ncp, accu, racc, 100000, true, false) > p)
                ux = nx;
            else
                lx = nx;
        } while ((ux - lx) / nx > accu);
    }
    else {
        do {
            nx = 0.5 * (lx + ux);
            if (pnchisq_1.pnchisq_raw(nx, df, ncp, accu, racc, 100000, false, false) < p)
                ux = nx;
            else
                lx = nx;
        } while ((ux - lx) / nx > accu);
    }
    return 0.5 * (ux + lx);
}
exports.qnchisq = qnchisq;
//# sourceMappingURL=qnchisq.js.map