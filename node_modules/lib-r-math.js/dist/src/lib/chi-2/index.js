"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var normal_1 = require("../rng/normal");
var dchisq_1 = require("./dchisq");
var dnchisq_1 = require("./dnchisq");
var pchisq_1 = require("./pchisq");
var pnchisq_1 = require("./pnchisq");
var qchisq_1 = require("./qchisq");
var qnchisq_1 = require("./qnchisq");
var rchisq_1 = require("./rchisq");
var rnchisq_1 = require("./rnchisq");
function ChiSquared(rng) {
    if (rng === void 0) { rng = new normal_1.Inversion(); }
    function rchisq(n, df, ncp) {
        if (n === void 0) { n = 1; }
        return ncp === undefined
            ? rchisq_1.rchisq(n, df, rng)
            : rnchisq_1.rnchisq(n, df, ncp, rng);
    }
    function qchisq(p, df, ncp, lowerTail, logP) {
        if (lowerTail === void 0) { lowerTail = true; }
        if (logP === void 0) { logP = false; }
        return ncp === undefined
            ? qchisq_1.qchisq(p, df, lowerTail, logP)
            : qnchisq_1.qnchisq(p, df, ncp, lowerTail, logP);
    }
    function pchisq(p, df, ncp, lowerTail, logP) {
        if (lowerTail === void 0) { lowerTail = true; }
        if (logP === void 0) { logP = false; }
        return ncp === undefined
            ? pchisq_1.pchisq(p, df, lowerTail, logP)
            : pnchisq_1.pnchisq(p, df, ncp, lowerTail, logP);
    }
    function dchisq(x, df, ncp, log) {
        if (log === void 0) { log = false; }
        return ncp === undefined ? dchisq_1.dchisq(x, df, log) : dnchisq_1.dnchisq(x, df, ncp, log);
    }
    return {
        dchisq: dchisq,
        pchisq: pchisq,
        qchisq: qchisq,
        rchisq: rchisq
    };
}
exports.ChiSquared = ChiSquared;
//# sourceMappingURL=index.js.map