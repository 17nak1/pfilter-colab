"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var _general_1 = require("../common/_general");
var dchisq_1 = require("../chi-2/dchisq");
var dpois_1 = require("../poisson/dpois");
var ceil = Math.ceil, sqrt = Math.sqrt;
var ISNAN = Number.isNaN, R_FINITE = Number.isFinite, ML_POSINF = Number.POSITIVE_INFINITY;
var printer_dnchisq = debug('dnchisq');
function dnchisq(x, df, ncp, give_log) {
    var eps = 5e-15;
    var i;
    var ncp2;
    var q;
    var mid;
    var dfmid;
    var imax;
    var sum;
    var term;
    if (ISNAN(x) || ISNAN(df) || ISNAN(ncp)) {
        return x + df + ncp;
    }
    if (!R_FINITE(df) || !R_FINITE(ncp) || ncp < 0 || df < 0) {
        return _general_1.ML_ERR_return_NAN(printer_dnchisq);
    }
    if (x < 0) {
        return _general_1.R_D__0(give_log);
    }
    if (x === 0 && df < 2)
        return ML_POSINF;
    if (ncp === 0)
        return df > 0 ? dchisq_1.dchisq(x, df, give_log) : _general_1.R_D__0(give_log);
    if (x === ML_POSINF)
        return _general_1.R_D__0(give_log);
    ncp2 = 0.5 * ncp;
    imax = ceil((-(2 + df) + sqrt((2 - df) * (2 - df) + 4 * ncp * x)) / 4);
    if (imax < 0)
        imax = 0;
    if (R_FINITE(imax)) {
        dfmid = df + 2 * imax;
        mid = dpois_1.dpois_raw(imax, ncp2, false) * dchisq_1.dchisq(x, dfmid, false);
    }
    else {
        if (give_log || ncp > 1000) {
            var nl = df + ncp;
            var ic = nl / (nl + ncp);
            return dchisq_1.dchisq(x * ic, nl * ic, give_log);
        }
        else
            return _general_1.R_D__0(give_log);
    }
    sum = mid;
    term = mid;
    df = dfmid;
    i = imax;
    var x2 = x * ncp2;
    do {
        i++;
        q = x2 / i / df;
        df += 2;
        term *= q;
        sum += term;
    } while (q >= 1 || term * q > (1 - q) * eps || term > 1e-10 * sum);
    term = mid;
    df = dfmid;
    i = imax;
    while (i !== 0) {
        df -= 2;
        q = i * df / x2;
        i--;
        term *= q;
        sum += term;
        if (q < 1 && term * q <= (1 - q) * eps)
            break;
    }
    return _general_1.R_D_val(give_log, sum);
}
exports.dnchisq = dnchisq;
//# sourceMappingURL=dnchisq.js.map