'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var _general_1 = require("../common/_general");
var lgammafn_sign_1 = require("../gamma/lgammafn_sign");
var dnorm_1 = require("../normal/dnorm");
var dt_1 = require("./dt");
var pnt_1 = require("./pnt");
var ISNAN = Number.isNaN, R_FINITE = Number.isFinite, DBL_EPSILON = Number.EPSILON;
var fabs = Math.abs, sqrt = Math.sqrt, log = Math.log, exp = Math.exp;
var printer_dnt = debug('dnt');
function dnt(x, df, ncp, giveLog) {
    if (ncp === void 0) { ncp = 0; }
    if (giveLog === void 0) { giveLog = false; }
    if (ISNAN(x) || ISNAN(df))
        return x + df;
    if (df <= 0.0)
        return _general_1.ML_ERR_return_NAN(printer_dnt);
    if (ncp === 0.0)
        return dt_1.dt(x, df, giveLog);
    if (!R_FINITE(x))
        return _general_1.R_D__0(giveLog);
    if (!R_FINITE(df) || df > 1e8)
        return dnorm_1.dnorm4(x, ncp, 1, giveLog);
    var u = function () {
        if (fabs(x) > sqrt(df * DBL_EPSILON)) {
            printer_dnt('fabs(x:%d)>sqrt(df*espsilon):%d', fabs(x), sqrt(df * DBL_EPSILON));
            return (log(df) -
                log(fabs(x)) +
                log(fabs(pnt_1.pnt(x * sqrt((df + 2) / df), df + 2, ncp, true, false) -
                    pnt_1.pnt(x, df, ncp, true, false))));
        }
        else {
            printer_dnt('fabs(x:%d)<=sqrt(df*espsilon):%d', fabs(x), sqrt(df * DBL_EPSILON));
            return (lgammafn_sign_1.lgammafn_sign((df + 1) / 2) -
                lgammafn_sign_1.lgammafn_sign(df / 2) -
                (_general_1.M_LN_SQRT_PI + 0.5 * (log(df) + ncp * ncp)));
        }
    }();
    printer_dnt('u=%d, giveLog=%s', u, giveLog);
    return giveLog ? u : exp(u);
}
exports.dnt = dnt;
//# sourceMappingURL=dnt.js.map