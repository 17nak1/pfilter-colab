'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var _general_1 = require("../common/_general");
var bd0_1 = require("../deviance/bd0");
var dnorm_1 = require("../normal/dnorm");
var stirlerror_1 = require("../stirling/stirlerror");
var log1p = Math.log1p, fabs = Math.abs, exp = Math.exp, log = Math.log, sqrt = Math.sqrt;
var ISNAN = Number.isNaN, DBL_EPSILON = Number.EPSILON, R_FINITE = Number.isFinite;
var printer_dt = debug('dt');
function dt(x, n, giveLog) {
    if (giveLog === void 0) { giveLog = false; }
    if (ISNAN(x) || ISNAN(n)) {
        return x + n;
    }
    if (n <= 0) {
        return _general_1.ML_ERR_return_NAN(printer_dt);
    }
    if (!R_FINITE(x)) {
        return _general_1.R_D__0(giveLog);
    }
    if (!R_FINITE(n)) {
        return dnorm_1.dnorm4(x, 0, 1, giveLog);
    }
    var u;
    var t = -bd0_1.bd0(n / 2, (n + 1) / 2) + stirlerror_1.stirlerr((n + 1) / 2) - stirlerror_1.stirlerr(n / 2);
    var x2n = x * x / n;
    var ax = 0;
    var l_x2n;
    var lrg_x2n = x2n > 1 / DBL_EPSILON;
    if (lrg_x2n) {
        ax = fabs(x);
        l_x2n = log(ax) - log(n) / 2;
        u =
            n * l_x2n;
    }
    else if (x2n > 0.2) {
        l_x2n = log(1 + x2n) / 2;
        u = n * l_x2n;
    }
    else {
        l_x2n = log1p(x2n) / 2;
        u = -bd0_1.bd0(n / 2, (n + x * x) / 2) + x * x / 2;
    }
    if (giveLog)
        return t - u - (_general_1.M_LN_SQRT_2PI + l_x2n);
    var I_sqrt_ = lrg_x2n ? sqrt(n) / ax : exp(-l_x2n);
    return exp(t - u) * _general_1.M_1_SQRT_2PI * I_sqrt_;
}
exports.dt = dt;
//# sourceMappingURL=dt.js.map