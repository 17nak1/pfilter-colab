"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var _general_1 = require("../common/_general");
var sexp_1 = require("../exp/sexp");
var expm1 = Math.expm1, fabs = Math.abs, sqrt = Math.sqrt, log = Math.log, exp = Math.exp;
var R_FINITE = Number.isFinite;
var printer_rgammaOne = debug('rgammaOne');
function rgammaOne(a, scale, rng) {
    if (a === void 0) { a = 1; }
    if (scale === void 0) { scale = 1; }
    var sqrt32 = 5.656854;
    var exp_m1 = 0.36787944117144232159;
    var q1 = 0.04166669;
    var q2 = 0.02083148;
    var q3 = 0.00801191;
    var q4 = 0.00144121;
    var q5 = -7.388e-5;
    var q6 = 2.4511e-4;
    var q7 = 2.424e-4;
    var a1 = 0.3333333;
    var a2 = -0.250003;
    var a3 = 0.2000062;
    var a4 = -0.1662921;
    var a5 = 0.1423657;
    var a6 = -0.1367177;
    var a7 = 0.1233795;
    var aa = 0;
    var aaa = 0;
    var s = 0;
    var s2 = 0;
    var d = 0;
    var q0 = 0;
    var b = 0;
    var si = 0;
    var c = 0;
    var e = 0;
    var p = 0;
    var q = 0;
    var r = 0;
    var t = 0;
    var u = 0;
    var v = 0;
    var w = 0;
    var x = 0;
    var ret_val = 0;
    if (!R_FINITE(a) || !R_FINITE(scale) || a < 0.0 || scale <= 0.0) {
        if (scale === 0)
            return 0;
        return _general_1.ML_ERR_return_NAN(printer_rgammaOne);
    }
    if (a < 1) {
        if (a === 0)
            return 0;
        e = 1.0 + exp_m1 * a;
        while (true) {
            p = e * rng.unif_rand();
            if (p >= 1.0) {
                x = -log((e - p) / a);
                if (sexp_1.exp_rand(rng.unif_rand) >= (1.0 - a) * log(x))
                    break;
            }
            else {
                x = exp(log(p) / a);
                if (sexp_1.exp_rand(rng.unif_rand) >= x)
                    break;
            }
        }
        return scale * x;
    }
    if (a !== aa) {
        aa = a;
        s2 = a - 0.5;
        s = sqrt(s2);
        d = sqrt32 - s * 12.0;
    }
    t = rng.norm_randOne();
    x = s + 0.5 * t;
    ret_val = x * x;
    if (t >= 0.0)
        return scale * ret_val;
    u = rng.unif_rand();
    if (d * u <= t * t * t)
        return scale * ret_val;
    if (a !== aaa) {
        aaa = a;
        r = 1.0 / a;
        q0 =
            ((((((q7 * r + q6) * r + q5) * r + q4) * r + q3) * r + q2) * r + q1) * r;
        if (a <= 3.686) {
            b = 0.463 + s + 0.178 * s2;
            si = 1.235;
            c = 0.195 / s - 0.079 + 0.16 * s;
        }
        else if (a <= 13.022) {
            b = 1.654 + 0.0076 * s2;
            si = 1.68 / s + 0.275;
            c = 0.062 / s + 0.024;
        }
        else {
            b = 1.77;
            si = 0.75;
            c = 0.1515 / s;
        }
    }
    if (x > 0.0) {
        v = t / (s + s);
        if (fabs(v) <= 0.25)
            q =
                q0 +
                    0.5 *
                        t *
                        t *
                        ((((((a7 * v + a6) * v + a5) * v + a4) * v + a3) * v + a2) * v + a1) *
                        v;
        else
            q = q0 - s * t + 0.25 * t * t + (s2 + s2) * log(1.0 + v);
        if (log(1.0 - u) <= q)
            return scale * ret_val;
    }
    while (true) {
        e = sexp_1.exp_rand(rng.unif_rand);
        u = rng.unif_rand();
        u = u + u - 1.0;
        if (u < 0.0)
            t = b - si * e;
        else
            t = b + si * e;
        if (t >= -0.71874483771719) {
            v = t / (s + s);
            if (fabs(v) <= 0.25)
                q =
                    q0 +
                        0.5 *
                            t *
                            t *
                            ((((((a7 * v + a6) * v + a5) * v + a4) * v + a3) * v + a2) * v +
                                a1) *
                            v;
            else
                q = q0 - s * t + 0.25 * t * t + (s2 + s2) * log(1.0 + v);
            if (q > 0.0) {
                w = expm1(q);
                if (c * fabs(u) <= w * exp(e - 0.5 * t * t))
                    break;
            }
        }
    }
    x = s + 0.5 * t;
    return scale * x * x;
}
exports.rgammaOne = rgammaOne;
//# sourceMappingURL=rgamma.js.map