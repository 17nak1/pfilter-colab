'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var _general_1 = require("../common/_general");
var toms708_1 = require("../common/toms708");
var ppois_1 = require("./ppois");
var qnorm_1 = require("../normal/qnorm");
var expm1_1 = require("../exp/expm1");
var fmax2 = Math.max, sqrt = Math.sqrt, floor = Math.floor, nearbyint = Math.round;
var ISNAN = Number.isNaN, DBL_EPSILON = Number.EPSILON, ML_POSINF = Number.POSITIVE_INFINITY, R_FINITE = Number.isFinite;
function do_search(y, z, p, lambda, incr) {
    if (z.val >= p) {
        while (true) {
            if (y === 0 || (z.val = ppois_1.ppois(y - incr, lambda, true, false)) < p)
                return y;
            y = fmax2(0, y - incr);
        }
    }
    else {
        while (true) {
            y = y + incr;
            if ((z.val = ppois_1.ppois(y, lambda, true, false)) >= p)
                return y;
        }
    }
}
var printer_qpois = debug('_qpois');
function qpois(p, lambda, lower_tail, log_p) {
    var mu;
    var sigma;
    var gamma;
    var y;
    var z = new toms708_1.NumberW(0);
    if (ISNAN(p) || ISNAN(lambda))
        return p + lambda;
    if (!R_FINITE(lambda)) {
        return _general_1.ML_ERR_return_NAN(printer_qpois);
    }
    if (lambda < 0)
        return _general_1.ML_ERR_return_NAN(printer_qpois);
    if (lambda === 0)
        return 0;
    var rc = _general_1.R_Q_P01_boundaries(lower_tail, log_p, p, 0, ML_POSINF);
    if (rc !== undefined) {
        return rc;
    }
    mu = lambda;
    sigma = sqrt(lambda);
    gamma = 1.0 / sigma;
    if (!lower_tail || log_p) {
        p = expm1_1.R_DT_qIv(lower_tail, log_p, p);
        if (p === 0)
            return 0;
        if (p === 1)
            return ML_POSINF;
    }
    if (p + 1.01 * DBL_EPSILON >= 1)
        return ML_POSINF;
    z.val = qnorm_1.qnorm(p, 0, 1, true, false);
    y = nearbyint(mu + sigma * (z.val + gamma * (z.val * z.val - 1) / 6));
    z.val = ppois_1.ppois(y, lambda, true, false);
    p *= 1 - 64 * DBL_EPSILON;
    if (lambda < 1e5)
        return do_search(y, z, p, lambda, 1);
    {
        var incr = floor(y * 0.001);
        var oldincr = void 0;
        do {
            oldincr = incr;
            y = do_search(y, z, p, lambda, incr);
            incr = fmax2(1, floor(incr / 100));
        } while (oldincr > 1 && incr > lambda * 1e-15);
        return y;
    }
}
exports.qpois = qpois;
//# sourceMappingURL=qpois.js.map