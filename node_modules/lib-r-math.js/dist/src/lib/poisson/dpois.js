'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var _general_1 = require("../common/_general");
var deviance_1 = require("../deviance");
var lgammafn_sign_1 = require("../gamma/lgammafn_sign");
var stirling_1 = require("../stirling");
var R_forceint = Math.round, log = Math.log, PI = Math.PI;
var ISNAN = Number.isNaN, R_FINITE = Number.isFinite, DBL_MIN = Number.MIN_VALUE;
var M_2PI = 2 * PI;
var printer = debug('dpois');
function dpois_raw(x, lambda, give_log) {
    if (lambda === 0)
        return x === 0 ? _general_1.R_D__1(give_log) : _general_1.R_D__0(give_log);
    if (!R_FINITE(lambda))
        return _general_1.R_D__0(give_log);
    if (x < 0)
        return _general_1.R_D__0(give_log);
    if (x <= lambda * DBL_MIN)
        return _general_1.R_D_exp(give_log, -lambda);
    if (lambda < x * DBL_MIN)
        return _general_1.R_D_exp(give_log, -lambda + x * log(lambda) - lgammafn_sign_1.lgammafn_sign(x + 1));
    return _general_1.R_D_fexp(give_log, M_2PI * x, -stirling_1.stirlerr(x) - deviance_1.bd0(x, lambda));
}
exports.dpois_raw = dpois_raw;
function dpois(x, lambda, give_log) {
    if (give_log === void 0) { give_log = false; }
    if (ISNAN(x) || ISNAN(lambda)) {
        return x + lambda;
    }
    if (lambda < 0) {
        return _general_1.ML_ERR_return_NAN(printer);
    }
    var rc = _general_1.R_D_nonint_check(give_log, x, printer);
    if (rc !== undefined) {
        return rc;
    }
    if (x < 0 || !R_FINITE(x)) {
        return _general_1.R_D__0(give_log);
    }
    x = R_forceint(x);
    return dpois_raw(x, lambda, give_log);
}
exports.dpois = dpois;
//# sourceMappingURL=dpois.js.map