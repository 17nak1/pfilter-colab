"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var _general_1 = require("../common/_general");
var toms708_1 = require("../common/toms708");
var expm1_1 = require("../exp/expm1");
var qnorm_1 = require("../normal/qnorm");
var pnbinom_1 = require("./pnbinom");
var ISNAN = Number.isNaN, ML_POSINF = Number.POSITIVE_INFINITY, DBL_EPSILON = Number.EPSILON;
var fmax2 = Math.max, sqrt = Math.sqrt, floor = Math.floor, R_forceint = Math.round;
var printer_do_search = debug('do_search');
function do_search(y, z, p, n, pr, incr) {
    printer_do_search('start: y:%d, z:%o, p:%d, n:%d, pr:%d, incr:%d', y, z, p, n, pr, incr);
    if (z.val >= p) {
        while (true) {
            if (y === 0 ||
                (z.val = pnbinom_1.pnbinom(y - incr, n, pr, true, false)) < p) {
                printer_do_search('exit1');
                return y;
            }
            y = fmax2(0, y - incr);
        }
    }
    else {
        while (true) {
            y = y + incr;
            if ((z.val = pnbinom_1.pnbinom(y, n, pr, true, false)) >= p) {
                printer_do_search('exit2');
                return y;
            }
        }
    }
}
var printer_qnbinom = debug('qnbinom');
function qnbinom(p, size, prob, lower_tail, log_p) {
    var P;
    var Q;
    var mu;
    var sigma;
    var gamma;
    var y;
    var z = new toms708_1.NumberW(0);
    if (ISNAN(p) || ISNAN(size) || ISNAN(prob)) {
        return NaN;
    }
    if (prob === 0 && size === 0)
        return 0;
    if (prob <= 0 || prob > 1 || size < 0) {
        return _general_1.ML_ERR_return_NAN(printer_qnbinom);
    }
    if (prob === 1 || size === 0)
        return 0;
    var rc = _general_1.R_Q_P01_boundaries(lower_tail, log_p, p, 0, ML_POSINF);
    if (rc !== undefined) {
        return rc;
    }
    Q = 1.0 / prob;
    P = (1.0 - prob) * Q;
    mu = size * P;
    sigma = sqrt(size * P * Q);
    gamma = (Q + P) / sigma;
    if (!lower_tail || log_p) {
        p = expm1_1.R_DT_qIv(lower_tail, log_p, p);
        if (p === _general_1.R_DT_0(lower_tail, log_p))
            return 0;
        if (p === _general_1.R_DT_1(lower_tail, log_p))
            return ML_POSINF;
    }
    if (p + 1.01 * DBL_EPSILON >= 1)
        return ML_POSINF;
    z.val = qnorm_1.qnorm(p, 0, 1, true, false);
    y = R_forceint(mu + sigma * (z.val + gamma * (z.val * z.val - 1) / 6));
    z.val = pnbinom_1.pnbinom(y, size, prob, true, false);
    p *= 1 - 64 * DBL_EPSILON;
    if (y < 1e5)
        return do_search(y, z, p, size, prob, 1);
    {
        var incr = floor(y * 0.001);
        var oldincr = void 0;
        do {
            oldincr = incr;
            y = do_search(y, z, p, size, prob, incr);
            incr = fmax2(1, floor(incr / 100));
        } while (oldincr > 1 && incr > y * 1e-15);
        return y;
    }
}
exports.qnbinom = qnbinom;
function qnbinom_mu(p, size, mu, lower_tail, log_p) {
    return qnbinom(p, size, size / (size + mu), lower_tail, log_p);
}
exports.qnbinom_mu = qnbinom_mu;
//# sourceMappingURL=qnbinom.js.map