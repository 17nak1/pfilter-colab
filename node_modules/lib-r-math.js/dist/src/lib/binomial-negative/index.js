"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var normal_1 = require("../rng/normal");
var dnbinom_1 = require("./dnbinom");
var pnbinom_1 = require("./pnbinom");
var qnbinom_1 = require("./qnbinom");
var rnbinom_1 = require("./rnbinom");
var errText = Object.freeze([
    'at most specify either argument "mu" or  "prob", but not both at the same time!',
    'both arguments "mu" and "prob" are undefined'
]);
function select(fs, mu, prob) {
    var selector = {
        mu: {
            d: dnbinom_1.dnbinom_mu,
            p: pnbinom_1.pnbinom_mu,
            q: qnbinom_1.qnbinom_mu,
            r: rnbinom_1.rnbinom_mu
        },
        p: {
            d: dnbinom_1.dnbinom,
            p: pnbinom_1.pnbinom,
            q: qnbinom_1.qnbinom,
            r: rnbinom_1.rnbinom
        }
    };
    if (prob !== undefined && mu !== undefined) {
        throw new Error(errText[0]);
    }
    if (prob === undefined && mu === undefined) {
        throw new Error(errText[1]);
    }
    var s = prob === undefined ? 'mu' : 'p';
    return selector[s][fs];
}
function NegativeBinomial(rng) {
    if (rng === void 0) { rng = new normal_1.Inversion(); }
    function dnbinom(x, size, prob, mu, giveLog) {
        if (giveLog === void 0) { giveLog = false; }
        var val = mu || prob;
        return select('d', mu, prob)(x, size, val, giveLog);
    }
    function pnbinom(q, size, prob, mu, lowerTail, logP) {
        if (lowerTail === void 0) { lowerTail = true; }
        if (logP === void 0) { logP = false; }
        var val = mu || prob;
        return select('p', mu, prob)(q, size, val, lowerTail, logP);
    }
    function qnbinom(q, size, prob, mu, lowerTail, logP) {
        if (lowerTail === void 0) { lowerTail = true; }
        if (logP === void 0) { logP = false; }
        var val = mu || prob;
        return select('q', mu, prob)(q, size, val, lowerTail, logP);
    }
    function rnbinom(n, size, prob, mu) {
        var val = mu || prob;
        return select('r', mu, prob)(n, size, val, rng);
    }
    return {
        dnbinom: dnbinom,
        pnbinom: pnbinom,
        qnbinom: qnbinom,
        rnbinom: rnbinom
    };
}
exports.NegativeBinomial = NegativeBinomial;
//# sourceMappingURL=index.js.map