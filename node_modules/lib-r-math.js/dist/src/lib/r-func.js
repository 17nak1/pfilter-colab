"use strict";
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var max = Math.max;
function seq_len(_a) {
    var i;
    var length = _a.length, _b = _a.base, base = _b === void 0 ? 1 : _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                i = 0;
                _c.label = 1;
            case 1:
                if (!(i < length)) return [3, 4];
                return [4, base + i];
            case 2:
                _c.sent();
                _c.label = 3;
            case 3:
                i++;
                return [3, 1];
            case 4:
                ;
                return [2];
        }
    });
}
exports.seq_len = seq_len;
exports.sequenceFactory = function (adjust) {
    if (adjust === void 0) { adjust = -1; }
    return function (start, end, delta) {
        if (delta === void 0) { delta = 1; }
        return Array.from(lazySeq(start, end, delta, adjust));
    };
};
function lazySeq(start, end, delta, adjust) {
    if (delta === void 0) { delta = 1; }
    if (adjust === void 0) { adjust = 0; }
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (delta === 0) {
                    throw new TypeError("argument 'delta' cannot be zero");
                }
                if (end > start && delta < 0) {
                    throw new TypeError("'end' > 'start' so delta must be positive");
                }
                if (end < start && delta > 0) {
                    throw new TypeError("'end' < 'start' so delta must be negative");
                }
                _a.label = 1;
            case 1: return [4, start + adjust];
            case 2:
                _a.sent();
                start = start + delta;
                _a.label = 3;
            case 3:
                if ((delta > 0 && start < end) || (delta < 0 && start > end)) return [3, 1];
                _a.label = 4;
            case 4: return [2];
        }
    });
}
exports.lazySeq = lazySeq;
function _typeOf(v) {
    if (v === null)
        return 'null';
    if (v instanceof Array)
        return 'array';
    if (v instanceof Function)
        return 'function';
    var k = typeof v;
    return k;
}
function multiplexer() {
    function simplePush(v) { analyzed.push(v); }
    var _i, _a, analyzed, select, k, arg, to, selector, _max, k, result, j, arr, idx;
    var rest = [];
    for (_i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                analyzed = [];
                ;
                select = (_a = {},
                    _a['undefined'] = function (v) { simplePush([v]); },
                    _a['null'] = function (v) { simplePush([v]); },
                    _a['number'] = function (v) { simplePush([v]); },
                    _a['string'] = function (v) { simplePush(v.split('')); },
                    _a['boolean'] = function (v) { simplePush([v]); },
                    _a['array'] = function (v) { simplePush(v); },
                    _a['object'] = function (v) { throw new Error('M001, Looping over properties not yet supported'); },
                    _a['function'] = function (v) { throw new Error('M002, arguments of type "function" are not yet supported'); },
                    _a);
                for (k = 0; k < rest.length; k++) {
                    arg = rest[k];
                    to = _typeOf(arg);
                    selector = select[to];
                    selector(arg);
                }
                _max = max.apply(void 0, __spread(analyzed.map(function (a) { return a.length; })));
                k = 0;
                _b.label = 1;
            case 1:
                if (!(k < _max)) return [3, 4];
                result = [];
                for (j = 0; j < analyzed.length; j++) {
                    arr = analyzed[j];
                    idx = k % arr.length;
                    result.push(arr[idx]);
                }
                return [4, result];
            case 2:
                _b.sent();
                _b.label = 3;
            case 3:
                k++;
                return [3, 1];
            case 4: return [2];
        }
    });
}
exports.multiplexer = multiplexer;
exports.c = chain(Array.from, flatten);
function Rcycle(fn) {
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var e_1, _a;
        var gen = multiplexer.apply(void 0, __spread(args));
        var rc = [];
        try {
            for (var gen_1 = __values(gen), gen_1_1 = gen_1.next(); !gen_1_1.done; gen_1_1 = gen_1.next()) {
                var arg = gen_1_1.value;
                rc[rc.length] = fn.apply(void 0, __spread(arg));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (gen_1_1 && !gen_1_1.done && (_a = gen_1.return)) _a.call(gen_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return rc;
    };
}
exports.Rcycle = Rcycle;
function isNumber(x) {
    return typeof x === 'number';
}
function numberPrecision(prec) {
    if (prec === void 0) { prec = 6; }
    return function convert(x) {
        var e_2, _a;
        if (typeof x === 'object' && x !== null) {
            try {
                for (var _b = __values(Object.entries(x)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = __read(_c.value, 2), prop = _d[0], value = _d[1];
                    x[prop] = convert(value);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return x;
        }
        if (isNumber(x)) {
            x = Number.parseFloat(x.toPrecision(prec));
        }
        return x;
    };
}
exports.numberPrecision = numberPrecision;
function sum(x) {
    var sum = 0;
    var gen = flatten(x);
    for (var v = gen.next(); !v.done; v = gen.next()) {
        sum += v.value;
    }
    return sum;
}
exports.sum = sum;
function randomGenHelper(n, fn) {
    var arg = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        arg[_i - 2] = arguments[_i];
    }
    var result;
    if (n === 0) {
        return [];
    }
    else if (n > 0) {
        result = Array.from({ length: n });
    }
    else if (n instanceof Array) {
        result = n;
    }
    else {
        throw new TypeError("n argument is not a number or a number array");
    }
    for (var i = 0; i < result.length; i++) {
        result[i] = fn.apply(void 0, __spread(arg));
    }
    return result;
}
exports.randomGenHelper = randomGenHelper;
function slicer(x) {
    var keys = Object.keys(x);
    var map = keys.map(function (key) { return ({ key: key, value: x[key] }); });
    return map;
}
function map(data) {
    var fx = slicer(data);
    return function k(fn) {
        return fx.map(function (o) { return fn(o.value, o.key); });
    };
}
exports.map = map;
function each(data) {
    var fx = slicer(data);
    return function k(fn) {
        fx.forEach(function (o) { return fn(o.value, o.key); });
    };
}
exports.each = each;
function flatten() {
    var _i, e_3, _a, e_4, _b, e_5, _c, e_6, _d, rest_1, rest_1_1, itm, _e, _f, v, e_4_1, itm_1, itm_1_1, v, e_5_1, _g, _h, v, e_6_1, e_3_1;
    var rest = [];
    for (_i = 0; _i < arguments.length; _i++) {
        rest[_i] = arguments[_i];
    }
    return __generator(this, function (_j) {
        switch (_j.label) {
            case 0:
                _j.trys.push([0, 32, 33, 34]);
                rest_1 = __values(rest), rest_1_1 = rest_1.next();
                _j.label = 1;
            case 1:
                if (!!rest_1_1.done) return [3, 31];
                itm = rest_1_1.value;
                if (!(itm === null || ['undefined', 'string', 'symbol', 'number', 'boolean'].includes(typeof itm))) return [3, 3];
                return [4, itm];
            case 2:
                _j.sent();
                return [3, 30];
            case 3:
                if (!(itm instanceof Map || itm instanceof Set)) return [3, 12];
                _j.label = 4;
            case 4:
                _j.trys.push([4, 9, 10, 11]);
                _e = __values(itm), _f = _e.next();
                _j.label = 5;
            case 5:
                if (!!_f.done) return [3, 8];
                v = _f.value;
                return [5, __values(flatten.call(undefined, v))];
            case 6:
                _j.sent();
                _j.label = 7;
            case 7:
                _f = _e.next();
                return [3, 5];
            case 8: return [3, 11];
            case 9:
                e_4_1 = _j.sent();
                e_4 = { error: e_4_1 };
                return [3, 11];
            case 10:
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_4) throw e_4.error; }
                return [7];
            case 11: return [3, 30];
            case 12:
                if (!(itm instanceof Array)) return [3, 21];
                _j.label = 13;
            case 13:
                _j.trys.push([13, 18, 19, 20]);
                itm_1 = __values(itm), itm_1_1 = itm_1.next();
                _j.label = 14;
            case 14:
                if (!!itm_1_1.done) return [3, 17];
                v = itm_1_1.value;
                return [5, __values(flatten.call(undefined, v))];
            case 15:
                _j.sent();
                _j.label = 16;
            case 16:
                itm_1_1 = itm_1.next();
                return [3, 14];
            case 17: return [3, 20];
            case 18:
                e_5_1 = _j.sent();
                e_5 = { error: e_5_1 };
                return [3, 20];
            case 19:
                try {
                    if (itm_1_1 && !itm_1_1.done && (_c = itm_1.return)) _c.call(itm_1);
                }
                finally { if (e_5) throw e_5.error; }
                return [7];
            case 20: return [3, 30];
            case 21:
                if (!(typeof itm[Symbol.iterator] === 'function')) return [3, 30];
                _j.label = 22;
            case 22:
                _j.trys.push([22, 27, 28, 29]);
                _g = __values(itm), _h = _g.next();
                _j.label = 23;
            case 23:
                if (!!_h.done) return [3, 26];
                v = _h.value;
                return [5, __values(flatten.call(undefined, v))];
            case 24:
                _j.sent();
                _j.label = 25;
            case 25:
                _h = _g.next();
                return [3, 23];
            case 26: return [3, 29];
            case 27:
                e_6_1 = _j.sent();
                e_6 = { error: e_6_1 };
                return [3, 29];
            case 28:
                try {
                    if (_h && !_h.done && (_d = _g.return)) _d.call(_g);
                }
                finally { if (e_6) throw e_6.error; }
                return [7];
            case 29: return [3, 30];
            case 30:
                rest_1_1 = rest_1.next();
                return [3, 1];
            case 31: return [3, 34];
            case 32:
                e_3_1 = _j.sent();
                e_3 = { error: e_3_1 };
                return [3, 34];
            case 33:
                try {
                    if (rest_1_1 && !rest_1_1.done && (_a = rest_1.return)) _a.call(rest_1);
                }
                finally { if (e_3) throw e_3.error; }
                return [7];
            case 34: return [2];
        }
    });
}
exports.flatten = flatten;
function chain() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
    }
    if (fns.length === 0) {
        throw new TypeError("specifiy functions to chain");
    }
    for (var i = 0; i < fns.length; i++) {
        if (typeof fns[i] !== 'function') {
            throw new TypeError("argument " + (i + 1) + " is not a function");
        }
    }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var lastArgs = args;
        if (args)
            for (var i = fns.length - 1; i >= 0; i--) {
                var fn = fns[i];
                lastArgs = [fn.apply(fn, lastArgs)];
            }
        return lastArgs[0];
    };
}
exports.chain = chain;
//# sourceMappingURL=r-func.js.map