'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var sqrt = Math.sqrt, log = Math.log;
function qinv(p, c, v) {
    var p0 = 0.322232421088;
    var q0 = 0.99348462606e-1;
    var p1 = -1.0;
    var q1 = 0.588581570495;
    var p2 = -0.342242088547;
    var q2 = 0.531103462366;
    var p3 = -0.204231210125;
    var q3 = 0.10353775285;
    var p4 = -0.453642210148e-4;
    var q4 = 0.38560700634e-2;
    var c1 = 0.8832;
    var c2 = 0.2368;
    var c3 = 1.214;
    var c4 = 1.208;
    var c5 = 1.4142;
    var vmax = 120.0;
    var ps;
    var q;
    var t;
    var yi;
    ps = 0.5 - 0.5 * p;
    yi = sqrt(log(1.0 / (ps * ps)));
    t =
        yi +
            ((((yi * p4 + p3) * yi + p2) * yi + p1) * yi + p0) /
                ((((yi * q4 + q3) * yi + q2) * yi + q1) * yi + q0);
    if (v < vmax)
        t += (t * t * t + t) / v / 4.0;
    q = c1 - c2 * t;
    if (v < vmax)
        q += -c3 / v + c4 * t / v;
    return t * (q * log(c - 1.0) + c5);
}
var debug = require("debug");
var _general_1 = require("../common/_general");
var expm1_1 = require("../exp/expm1");
var ptukey_1 = require("./ptukey");
var ISNAN = Number.isNaN, ML_POSINF = Number.POSITIVE_INFINITY;
var fabs = Math.abs, fmax2 = Math.max;
var printer = debug('qtukey');
function qtukey(p, rr, cc, df, lower_tail, log_p) {
    if (lower_tail === void 0) { lower_tail = true; }
    if (log_p === void 0) { log_p = false; }
    var eps = 0.0001;
    var maxiter = 50;
    var ans = 0.0;
    var valx0;
    var valx1;
    var x0;
    var x1;
    var xabs;
    var iter;
    if (ISNAN(p) || ISNAN(rr) || ISNAN(cc) || ISNAN(df)) {
        _general_1.ML_ERROR(_general_1.ME.ME_DOMAIN, 'qtukey', printer);
        return NaN;
    }
    if (df < 2 || rr < 1 || cc < 2)
        return _general_1.ML_ERR_return_NAN(printer);
    var rc = _general_1.R_Q_P01_boundaries(lower_tail, log_p, p, 0, ML_POSINF);
    if (rc !== undefined) {
        return rc;
    }
    p = expm1_1.R_DT_qIv(lower_tail, log_p, p);
    x0 = qinv(p, cc, df);
    valx0 = ptukey_1.ptukey(x0, rr, cc, df, true, false) - p;
    if (valx0 > 0.0)
        x1 = fmax2(0.0, x0 - 1.0);
    else
        x1 = x0 + 1.0;
    valx1 = ptukey_1.ptukey(x1, rr, cc, df, true, false) - p;
    for (iter = 1; iter < maxiter; iter++) {
        ans = x1 - valx1 * (x1 - x0) / (valx1 - valx0);
        valx0 = valx1;
        x0 = x1;
        if (ans < 0.0) {
            ans = 0.0;
            valx1 = -p;
        }
        valx1 =
            ptukey_1.ptukey(ans, rr, cc, df, true, false) - p;
        x1 = ans;
        xabs = fabs(x1 - x0);
        if (xabs < eps)
            return ans;
    }
    _general_1.ML_ERROR(_general_1.ME.ME_NOCONV, 'qtukey', printer);
    return ans;
}
exports.qtukey = qtukey;
//# sourceMappingURL=qtukey.js.map