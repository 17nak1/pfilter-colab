'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var wprob_1 = require("./wprob");
var _general_1 = require("../common/_general");
var _general_2 = require("../common/_general");
var lgammafn_sign_1 = require("../gamma/lgammafn_sign");
var ISNAN = Number.isNaN, R_FINITE = Number.isFinite;
var exp = Math.exp, sqrt = Math.sqrt, log = Math.log, M_LN2 = Math.LN2;
var printer_ptukey = debug('_ptukey');
function ptukey(q, rr, cc, df, lower_tail, log_p) {
    if (lower_tail === void 0) { lower_tail = true; }
    if (log_p === void 0) { log_p = false; }
    var nlegq = 16;
    var ihalfq = 8;
    var eps1 = -30.0;
    var eps2 = 1.0e-14;
    var dhaf = 100.0;
    var dquar = 800.0;
    var deigh = 5000.0;
    var dlarg = 25000.0;
    var ulen1 = 1.0;
    var ulen2 = 0.5;
    var ulen3 = 0.25;
    var ulen4 = 0.125;
    var xlegq = [
        0.98940093499164993259615417345,
        0.944575023073232576077988415535,
        0.865631202387831743880467897712,
        0.755404408355003033895101194847,
        0.617876244402643748446671764049,
        0.458016777657227386342419442984,
        0.28160355077925891323046050146,
        0.95012509837637440185319335425e-1
    ];
    var alegq = [
        0.27152459411754094851780572456e-1,
        0.622535239386478928628438369944e-1,
        0.951585116824927848099251076022e-1,
        0.124628971255533872052476282192,
        0.149595988816576732081501730547,
        0.16915651939500253818931207903,
        0.182603415044923588866763667969,
        0.189450610455068496285396723208
    ];
    var ans;
    var f2;
    var f21;
    var f2lf;
    var ff4;
    var otsum;
    var qsqz;
    var rotsum;
    var twa1;
    var ulen;
    var wprb;
    if (ISNAN(q) || ISNAN(rr) || ISNAN(cc) || ISNAN(df)) {
        return _general_1.ML_ERR_return_NAN(printer_ptukey);
    }
    if (q <= 0) {
        return _general_1.R_DT_0(lower_tail, log_p);
    }
    if (df < 2 || rr < 1 || cc < 2)
        return _general_1.ML_ERR_return_NAN(printer_ptukey);
    if (!R_FINITE(q))
        return _general_1.R_DT_1(lower_tail, log_p);
    if (df > dlarg)
        return _general_2.R_DT_val(lower_tail, log_p, wprob_1.wprob(q, rr, cc));
    f2 = df * 0.5;
    f2lf = f2 * log(df) - df * M_LN2 - lgammafn_sign_1.lgammafn_sign(f2);
    f21 = f2 - 1.0;
    ff4 = df * 0.25;
    if (df <= dhaf)
        ulen = ulen1;
    else if (df <= dquar)
        ulen = ulen2;
    else if (df <= deigh)
        ulen = ulen3;
    else
        ulen = ulen4;
    f2lf += log(ulen);
    ans = 0.0;
    otsum = 0.0;
    for (var i = 1; i <= 50; i++) {
        otsum = 0.0;
        twa1 = (2 * i - 1) * ulen;
        for (var jj = 1; jj <= nlegq; jj++) {
            var j = ihalfq < jj ? jj - ihalfq - 1 : jj - 1;
            var t1 = ihalfq < jj
                ? f2lf +
                    f21 * log(twa1 + xlegq[j] * ulen) -
                    (xlegq[j] * ulen + twa1) * ff4
                : f2lf +
                    f21 * log(twa1 - xlegq[j] * ulen) +
                    (xlegq[j] * ulen - twa1) * ff4;
            if (t1 >= eps1) {
                if (ihalfq < jj) {
                    qsqz = q * sqrt((xlegq[j] * ulen + twa1) * 0.5);
                }
                else {
                    qsqz = q * sqrt((-(xlegq[j] * ulen) + twa1) * 0.5);
                }
                wprb = wprob_1.wprob(qsqz, rr, cc);
                rotsum = wprb * alegq[j] * exp(t1);
                otsum += rotsum;
            }
        }
        if (i * ulen >= 1.0 && otsum <= eps2)
            break;
        ans += otsum;
    }
    if (otsum > eps2) {
        _general_1.ML_ERROR(_general_1.ME.ME_PRECISION, 'ptukey', printer_ptukey);
    }
    if (ans > 1)
        ans = 1;
    return _general_2.R_DT_val(lower_tail, log_p, ans);
}
exports.ptukey = ptukey;
//# sourceMappingURL=ptukey.js.map