"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var beta_1 = require("./beta");
var lbeta_1 = require("./lbeta");
var dbeta_1 = require("./dbeta");
var dnbeta_1 = require("./dnbeta");
var pbeta_1 = require("./pbeta");
var pnbeta_1 = require("./pnbeta");
var qbeta_1 = require("./qbeta");
var qnbeta_1 = require("./qnbeta");
var rchisq_1 = require("../chi-2/rchisq");
var rnchisq_1 = require("../chi-2/rnchisq");
var normal_1 = require("../rng/normal");
var rbeta_1 = require("./rbeta");
exports.default = {
    beta: beta_1.beta,
    lbeta: lbeta_1.lbeta
};
function Beta(rng) {
    if (rng === void 0) { rng = new normal_1.Inversion(); }
    function dbeta(x, shape1, shape2, ncp, log) {
        if (ncp === undefined || ncp === 0) {
            return dbeta_1.dbeta(x, shape1, shape2, log || false);
        }
        else {
            return dnbeta_1.dnbeta(x, shape1, shape2, ncp || 0, log || false);
        }
    }
    function pbeta(q, shape1, shape2, ncp, lowerTail, logP) {
        if (lowerTail === void 0) { lowerTail = true; }
        if (logP === void 0) { logP = false; }
        if (ncp === undefined || ncp === 0) {
            return pbeta_1.pbeta(q, shape1, shape2, lowerTail, logP);
        }
        else {
            return pnbeta_1.pnbeta(q, shape1, shape2, ncp, lowerTail, logP);
        }
    }
    function qbeta(p, shape1, shape2, ncp, lowerTail, logP) {
        if (lowerTail === void 0) { lowerTail = true; }
        if (logP === void 0) { logP = false; }
        if (ncp === undefined) {
            return qbeta_1.qbeta(p, shape1, shape2, lowerTail, logP);
        }
        else {
            return qnbeta_1.qnbeta(p, shape1, shape2, ncp, lowerTail, logP);
        }
    }
    function rbeta(n, shape1, shape2, ncp) {
        if (ncp === void 0) { ncp = 0; }
        if (ncp === 0) {
            return rbeta_1.rbeta(n, shape1, shape2, rng);
        }
        else {
            var ar = rnchisq_1.rnchisq(n, 2 * shape1, ncp, rng);
            var br_1 = rchisq_1.rchisq(n, 2 * shape2, rng);
            var result = ar.map(function (a, i) { return ({ a: a, b: br_1[i] }); }).map(function (_a) {
                var a = _a.a, b = _a.b;
                return a / (a + b);
            });
            return result;
        }
    }
    return Object.freeze({
        dbeta: dbeta,
        pbeta: pbeta,
        qbeta: qbeta,
        rbeta: rbeta
    });
}
exports.Beta = Beta;
//# sourceMappingURL=index.js.map