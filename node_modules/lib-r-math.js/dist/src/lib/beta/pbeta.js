"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var _general_1 = require("../common/_general");
var toms708_1 = require("../common/toms708");
var ISNAN = Number.isNaN, R_FINITE = Number.isFinite;
var M_LN2 = Math.LN2, log = Math.log;
var printer_pbeta_raw = debug('pbeta_raw');
function pbeta_raw(x, a, b, lower_tail, log_p) {
    if (a === 0 || b === 0 || !R_FINITE(a) || !R_FINITE(b)) {
        if (a === 0 && b === 0)
            return log_p ? -M_LN2 : 0.5;
        if (a === 0 || a / b === 0)
            return _general_1.R_DT_1(lower_tail, log_p);
        if (b === 0 || b / a === 0)
            return _general_1.R_DT_0(lower_tail, log_p);
        if (x < 0.5)
            return _general_1.R_DT_0(lower_tail, log_p);
        else
            return _general_1.R_DT_1(lower_tail, log_p);
    }
    var x1 = 0.5 - x + 0.5;
    var w = new toms708_1.NumberW(0);
    var wc = new toms708_1.NumberW(0);
    var ierr = new toms708_1.NumberW(0);
    printer_pbeta_raw('before Toms708.bratio, a=%d, b=%d, x=%d, w=%d,wc=%d, ierr=%d', a, b, x, w.val, wc.val, ierr.val);
    toms708_1.Toms708.bratio(a, b, x, x1, w, wc, ierr);
    printer_pbeta_raw('after Toms708.bratio, a=%d, b=%d, x=%d, w=%d,wc=%d, ierr=%d', a, b, x, w.val, wc.val, ierr.val);
    if (ierr.val && ierr.val !== 11 && ierr.val !== 14)
        printer_pbeta_raw('pbeta_raw(%d, a=%d, b=%d, ..) -> bratio() gave error code %d', x, a, b, ierr);
    if (log_p) {
        w.val = log(w.val);
        wc.val = log(wc.val);
    }
    return lower_tail ? w.val : wc.val;
}
exports.pbeta_raw = pbeta_raw;
var printer_pbeta = debug('pbeta');
function pbeta(q, a, b, lowerTail, logP) {
    if (lowerTail === void 0) { lowerTail = true; }
    if (logP === void 0) { logP = false; }
    printer_pbeta('pbeta(q=%d, a=%d, b=%d, l.t=%s, ln=%s)', q, a, b, lowerTail, logP);
    if (ISNAN(q) || ISNAN(a) || ISNAN(b))
        return NaN;
    if (a < 0 || b < 0)
        return _general_1.ML_ERR_return_NAN(printer_pbeta);
    if (q <= 0)
        return _general_1.R_DT_0(lowerTail, logP);
    if (q >= 1)
        return _general_1.R_DT_1(lowerTail, logP);
    return pbeta_raw(q, a, b, lowerTail, logP);
}
exports.pbeta = pbeta;
//# sourceMappingURL=pbeta.js.map