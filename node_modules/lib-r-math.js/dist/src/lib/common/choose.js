"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var _general_1 = require("../common/_general");
var fabs = Math.abs, log = Math.log, exp = Math.exp, round = Math.round;
var isInteger = Number.isInteger, ML_NEGINF = Number.NEGATIVE_INFINITY, ISNAN = Number.isNaN;
var lbeta_1 = require("../beta/lbeta");
var lgammafn_sign_1 = require("../gamma/lgammafn_sign");
var lgammafn_sign_2 = require("../gamma/lgammafn_sign");
function lfastchoose(n, k) {
    return -log(n + 1) - lbeta_1.lbeta(n - k + 1, k + 1);
}
exports.lfastchoose = lfastchoose;
function lfastchoose2(n, k, sChoose) {
    var r;
    r = lgammafn_sign_2.lgammafn_sign(n - k + 1, sChoose);
    return lgammafn_sign_1.lgammafn_sign(n + 1) - lgammafn_sign_1.lgammafn_sign(k + 1) - r;
}
exports.lfastchoose2 = lfastchoose2;
var printer_lchoose = debug('lchoose');
function internal_lchoose(n, k) {
    var k0 = k;
    k = Math.round(k);
    if (ISNAN(n) || ISNAN(k))
        return n + k;
    if (fabs(k - k0) > 1e-7)
        printer_lchoose('"k" (%d) must be integer, rounded to %d', k0, k);
    if (k < 2) {
        if (k < 0)
            return ML_NEGINF;
        if (k === 0)
            return 0;
        return log(fabs(n));
    }
    if (n < 0) {
        return internal_lchoose(-n + k - 1, k);
    }
    else if (isInteger(n)) {
        n = round(n);
        if (n < k)
            return ML_NEGINF;
        if (n - k < 2)
            return internal_lchoose(n, n - k);
        return lfastchoose(n, k);
    }
    if (n < k - 1) {
        return lfastchoose2(n, k);
    }
    return lfastchoose(n, k);
}
exports.internal_lchoose = internal_lchoose;
var k_small_max = 30;
var printer_choose = debug('choose');
function internal_choose(n, k) {
    var r;
    var k0 = k;
    k = round(k);
    if (ISNAN(n) || ISNAN(k))
        return n + k;
    if (fabs(k - k0) > 1e-7)
        printer_choose('k (%d) must be integer, rounded to %d', k0, k);
    if (k < k_small_max) {
        var j = void 0;
        if (n - k < k && n >= 0 && isInteger(n))
            k = n - k;
        if (k < 0)
            return 0;
        if (k === 0)
            return 1;
        r = n;
        for (j = 2; j <= k; j++)
            r *= (n - j + 1) / j;
        return isInteger(n) ? round(r) : r;
    }
    if (n < 0) {
        r = internal_choose(-n + k - 1, k);
        if (_general_1.isOdd(k))
            r = -r;
        return r;
    }
    else if (isInteger(n)) {
        n = round(n);
        if (n < k)
            return 0;
        if (n - k < k_small_max)
            return internal_choose(n, n - k);
        return round(exp(lfastchoose(n, k)));
    }
    if (n < k - 1) {
        var schoose = [0];
        r = lfastchoose2(n, k, schoose);
        return schoose[0] * exp(r);
    }
    return exp(lfastchoose(n, k));
}
exports.internal_choose = internal_choose;
//# sourceMappingURL=choose.js.map