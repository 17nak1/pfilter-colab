"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var NumberW_1 = require("./NumberW");
var trunc = Math.trunc, log = Math.log, abs = Math.abs, min = Math.min, pow = Math.pow;
var printer_bratio = debug('Toms708.bratio');
var Toms708 = (function () {
    function Toms708() {
    }
    Toms708.alnrel = function (a) {
        var p3 = -0.178874546012214e-1;
        var p2 = 0.405303492862024;
        var p1 = -0.129418923021993e1;
        var q3 = -0.845104217945565e-1;
        var q2 = 0.747811014037616;
        var q1 = -0.162752256355323e1;
        var t = 0.0;
        var w = 0.0;
        var x = 0.0;
        var t2 = 0.0;
        if (Math.abs(a) > 0.375) {
            x = 1 + a;
            return log(x);
        }
        t = a / (a + 2.0);
        t2 = t * t;
        w =
            (((p3 * t2 + p2) * t2 + p1) * t2 + 1.0) /
                (((q3 * t2 + q2) * t2 + q1) * t2 + 1.0);
        return 2.0 * t * w;
    };
    Toms708.algdiv = function (a, b) {
        var c5 = -0.165322962780713e-2;
        var c4 = 0.837308034031215e-3;
        var c3 = -0.59520293135187e-3;
        var c2 = 0.79365066682539e-3;
        var c1 = -0.277777777760991e-2;
        var c0 = 0.833333333333333e-1;
        var s11 = 0.0;
        var c = 0.0;
        var d = 0.0;
        var h = 0.0;
        var t = 0.0;
        var u = 0.0;
        var v = 0.0;
        var w = 0.0;
        var x = 0.0;
        var s3 = 0.0;
        var s5 = 0.0;
        var s7 = 0.0;
        var x2 = 0.0;
        var s9 = 0.0;
        if (a <= b) {
            h = a / b;
            c = h / (1.0 + h);
            x = 1.0 / (1.0 + h);
            d = b + (a - 0.5);
        }
        else {
            h = b / a;
            c = 1.0 / (1.0 + h);
            x = h / (1.0 + h);
            d = a + (b - 0.5);
        }
        x2 = x * x;
        s3 = 1.0 + x + x2;
        s5 = 1.0 + x + x2 * s3;
        s7 = 1.0 + x + x2 * s5;
        s9 = 1.0 + x + x2 * s7;
        s11 = 1.0 + x + x2 * s9;
        t = Math.pow(1.0 / b, 2);
        w =
            ((((c5 * s11 * t + c4 * s9) * t + c3 * s7) * t + c2 * s5) * t + c1 * s3) *
                t +
                c0;
        w *= c / b;
        u = d * Toms708.alnrel(a / b);
        v = a * (log(b) - 1.0);
        if (u <= v)
            return w - u - v;
        return w - v - u;
    };
    Toms708.apser = function (a, b, x, eps) {
        var g = 0.577215664901533;
        var j = 0.0;
        var bx = 0.0;
        var c = 0.0;
        var s = 0.0;
        var t = 0.0;
        var tol = 0.0;
        var aj = 0.0;
        bx = b * x;
        t = x - bx;
        if (b * eps > 2e-2) {
            c = log(bx) + g + t;
        }
        else {
            c = log(x) + Toms708.psi(b) + g + t;
        }
        tol = 5.0 * eps * Math.abs(c);
        j = 1.0;
        s = 0.0;
        do {
            j++;
            t *= x - bx / j;
            aj = t / j;
            s += aj;
        } while (Math.abs(aj) > tol);
        return -(a * (c + s));
    };
    Toms708.basym = function (a, b, lambda, eps) {
        var a0 = new Array(21).fill(0);
        var b0 = new Array(21).fill(0);
        var c = new Array(21).fill(0);
        var d = new Array(21).fill(0);
        var num = 20;
        var e0 = 1.12837916709551;
        var e1 = 0.353553390593274;
        var h;
        var r0;
        var r1;
        var w0;
        if (a <= b) {
            h = a / b;
            r0 = 1.0 / (1.0 + h);
            r1 = (b - a) / b;
            w0 = 1.0 / Math.sqrt(a * (1.0 + h));
        }
        else {
            h = b / a;
            r0 = 1.0 / (1.0 + h);
            r1 = (b - a) / a;
            w0 = 1.0 / Math.sqrt(b * (1.0 + h));
        }
        var f = a * Toms708.rlog1(-lambda / a) + b * Toms708.rlog1(lambda / b);
        var t = Math.exp(-f);
        if (t === 0.0)
            return 0;
        var z0 = Math.sqrt(f);
        var z = 0.5 * (z0 / e1);
        var z2 = f + f;
        a0[0] = 2.0 / 3.0 * r1;
        c[0] = -0.5 * a0[0];
        d[0] = -c[0];
        var j0 = 0.5 / e0 * Toms708.erfc1(1, z0);
        var j1 = e1;
        var sum = j0 + d[0] * w0 * j1;
        var s = 1.0;
        var h2 = h * h;
        var hn = 1.0;
        var w = w0;
        var znm1 = z;
        var zn = z2;
        for (var n = 2; n <= num; n += 2) {
            hn = h2 * hn;
            a0[n] = 2.0 * r0 * (1.0 + h * hn) / (n + 2.0);
            var np1 = n + 1;
            s = s + hn;
            a0[np1] = 2.0 * r1 * s / (n + 3.0);
            for (var i = n; i <= np1; i++) {
                var r = -0.5 * (i + 1.0);
                b0[1] = r * a0[1];
                for (var m = 2; m <= i; m++) {
                    var bsum = 0.0;
                    var mm1 = m - 1;
                    for (var j = 1; j <= mm1; j++) {
                        var mmj = m - j;
                        bsum = bsum + (j * r - mmj) * a0[j] * b0[mmj];
                    }
                    b0[m] = r * a0[m] + bsum / m;
                }
                c[i] = b0[i] / (i + 1.0);
                var dsum = 0.0;
                var im1 = i - 1;
                for (var j = 1; j <= im1; j++) {
                    var imj = i - j;
                    dsum = dsum + d[imj] * c[j];
                }
                d[i] = -(dsum + c[i]);
            }
            j0 = e1 * znm1 + (n - 1.0) * j0;
            j1 = e1 * zn + n * j1;
            znm1 = z2 * znm1;
            zn = z2 * zn;
            w = w0 * w;
            var t0 = d[n] * w * j0;
            w = w0 * w;
            var t1 = d[np1] * w * j1;
            sum = sum + (t0 + t1);
            if (Math.abs(t0) + Math.abs(t1) <= eps * sum)
                break;
        }
        var u = Math.exp(-Toms708.bcorr(a, b));
        return e0 * t * u * sum;
    };
    Toms708.bcorr = function (a0, b0) {
        var c5 = -0.165322962780713e-2;
        var c4 = 0.837308034031215e-3;
        var c3 = -0.59520293135187e-3;
        var c2 = 0.79365066682539e-3;
        var c1 = -0.277777777760991e-2;
        var c0 = 0.833333333333333e-1;
        var s11 = 0.0;
        var a = 0.0;
        var b = 0.0;
        var c = 0.0;
        var h = 0.0;
        var t = 0.0;
        var w = 0.0;
        var x = 0.0;
        var s3 = 0.0;
        var s5 = 0.0;
        var s7 = 0.0;
        var x2 = 0.0;
        var s9 = 0.0;
        a = Math.min(a0, b0);
        b = Math.max(a0, b0);
        h = a / b;
        c = h / (1.0 + h);
        x = 1.0 / (1.0 + h);
        x2 = x * x;
        s3 = 1.0 + (x + x2);
        s5 = 1.0 + (x + x2 * s3);
        s7 = 1.0 + (x + x2 * s5);
        s9 = 1.0 + (x + x2 * s7);
        s11 = 1.0 + (x + x2 * s9);
        t = Math.pow(1.0 / b, 2);
        w =
            ((((c5 * s11 * t + c4 * s9) * t + c3 * s7) * t + c2 * s5) * t + c1 * s3) *
                t +
                c0;
        w = w * (c / b);
        t = Math.pow(1.0 / a, 2);
        return (((((c5 * t + c4) * t + c3) * t + c2) * t + c1) * t + c0) / a + w;
    };
    Toms708.beta_cdf_values = function (nData, a, b, x, fx) {
        var nMax = 42;
        var aVec = [
            0.5,
            0.5,
            0.5,
            1.0,
            1.0,
            1.0,
            1.0,
            1.0,
            2.0,
            2.0,
            2.0,
            2.0,
            2.0,
            2.0,
            2.0,
            2.0,
            2.0,
            5.5,
            10.0,
            10.0,
            10.0,
            10.0,
            20.0,
            20.0,
            20.0,
            20.0,
            20.0,
            30.0,
            30.0,
            40.0,
            0.1e1,
            0.1e1,
            0.1e1,
            0.1e1,
            0.1e1,
            0.1e1,
            0.1e1,
            0.1e1,
            0.2e1,
            0.3e1,
            0.4e1,
            0.5e1
        ];
        var bVec = [
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            1.0,
            2.0,
            2.0,
            2.0,
            2.0,
            2.0,
            2.0,
            2.0,
            2.0,
            2.0,
            5.0,
            0.5,
            5.0,
            5.0,
            10.0,
            5.0,
            10.0,
            10.0,
            20.0,
            20.0,
            10.0,
            10.0,
            20.0,
            0.5,
            0.5,
            0.5,
            0.5,
            0.2e1,
            0.3e1,
            0.4e1,
            0.5e1,
            0.2e1,
            0.2e1,
            0.2e1,
            0.2e1
        ];
        var fxVec = [
            0.6376856085851985e-1,
            0.2048327646991335,
            0.1e1,
            0.0,
            0.5012562893380045e-2,
            0.513167019494862e-1,
            0.2928932188134525,
            0.5,
            0.28e-1,
            0.104,
            0.216,
            0.352,
            0.5,
            0.648,
            0.784,
            0.896,
            0.972,
            0.4361908850559777,
            0.1516409096347099,
            0.8978271484375e-1,
            0.1e1,
            0.5,
            0.4598773297575791,
            0.2146816102371739,
            0.9507364826957875,
            0.5,
            0.8979413687105918,
            0.2241297491808366,
            0.7586405487192086,
            0.7001783247477069,
            0.513167019494862e-1,
            0.1055728090000841,
            0.1633399734659245,
            0.2254033307585166,
            0.36,
            0.488,
            0.5904,
            0.67232,
            0.216,
            0.837e-1,
            0.3078e-1,
            0.10935e-1
        ];
        var xVec = [
            0.01,
            0.1,
            1.0,
            0.0,
            0.01,
            0.1,
            0.5,
            0.5,
            0.1,
            0.2,
            0.3,
            0.4,
            0.5,
            0.6,
            0.7,
            0.8,
            0.9,
            0.5,
            0.9,
            0.5,
            1.0,
            0.5,
            0.8,
            0.6,
            0.8,
            0.5,
            0.6,
            0.7,
            0.8,
            0.7,
            0.1,
            0.2,
            0.3,
            0.4,
            0.2,
            0.2,
            0.2,
            0.2,
            0.3,
            0.3,
            0.3,
            0.3
        ];
        if (nData.val < 0)
            nData.val = 0;
        nData.val++;
        if (nData.val > nMax) {
            nData.val = 0;
            a.val = b.val = x.val = fx.val = 0.0;
        }
        else {
            a.val = aVec[nData.val - 1];
            b.val = bVec[nData.val - 1];
            x.val = xVec[nData.val - 1];
            fx.val = fxVec[nData.val - 1];
        }
    };
    Toms708.betaln = function (a0, b0) {
        var e = 0.918938533204673;
        var a = 0.0;
        var b = 0.0;
        var c = 0.0;
        var h = 0.0;
        var i = 0;
        var n = 0;
        var u = 0.0;
        var v = 0.0;
        var w = 0.0;
        var z = 0.0;
        a = Math.min(a0, b0);
        b = Math.max(a0, b0);
        if (a < 1) {
            if (b < 8.0)
                return Toms708.gamln(a) + Toms708.algdiv(a, b);
            else
                return Toms708.gamln(a) + Toms708.gamln(b) - Toms708.gamln(a + b);
        }
        else if (a >= 1 && a < 8) {
            if (a < 2 && b < 2) {
                return Toms708.gamln(a) + Toms708.gamln(b) - Toms708.gsumln(a, b);
            }
            else if (b > 2) {
                w = 0.0;
                if (b < 8.0) {
                    n = trunc(b - 1.0);
                    z = 1.0;
                    for (i = 1; i <= n; i++) {
                        b--;
                        z *= b / (a + b);
                    }
                    return (w +
                        log(z) +
                        (Toms708.gamln(a) + Toms708.gamln(b) - Toms708.gsumln(a, b)));
                }
                else
                    return Toms708.gamln(a) + Toms708.algdiv(a, b);
            }
            else if (a > 2) {
                if (b > 1000.0) {
                    n = trunc(a - 1.0);
                    w = 1.0;
                    for (i = 1; i <= n; i++) {
                        a--;
                        w = w * (a / (1.0 + a / b));
                    }
                    return (log(w) - n * log(b) + (Toms708.gamln(a) + Toms708.algdiv(a, b)));
                }
                n = trunc(a - 1.0);
                w = 1.0;
                for (i = 1; i <= n; i++) {
                    a--;
                    h = a / b;
                    w *= h / (1.0 + h);
                }
                w = log(w);
                if (b < 8.0) {
                    n = trunc(b - 1.0);
                    z = 1.0;
                    for (i = 1; i <= n; i++) {
                        b--;
                        z *= b / (a + b);
                    }
                    return (w +
                        log(z) +
                        (Toms708.gamln(a) + Toms708.gamln(b) - Toms708.gsumln(a, b)));
                }
                else
                    return w + Toms708.gamln(a) + Toms708.algdiv(a, b);
            }
        }
        w = Toms708.bcorr(a, b);
        h = a / b;
        c = h / (1.0 + h);
        u = -((a - 0.5) * log(c));
        v = b * Toms708.alnrel(h);
        if (u > v)
            return -0.5 * log(b) + e + w - u - v;
        else
            return -0.5 * log(b) + e + w - v - u;
    };
    Toms708.bfrac = function (a, b, x, y, lambda, eps) {
        var n = 0.0;
        var yp1 = 0.0;
        var alpha = 0.0;
        var c = 0.0;
        var e = 0.0;
        var p = 0.0;
        var r = 0.0;
        var s = 0.0;
        var t = 0.0;
        var w = 0.0;
        var c0 = 0.0;
        var c1 = 0.0;
        var anp1 = 0.0;
        var bnp1 = 0.0;
        var r0 = 0.0;
        var beta = 0.0;
        var an = 0.0;
        var bn = 0.0;
        var dResult = Toms708.brcomp(a, b, x, y);
        if (dResult === 0.0)
            return 0;
        c = 1.0 + lambda;
        c0 = b / a;
        c1 = 1.0 + 1.0 / a;
        yp1 = y + 1.0;
        n = 0.0;
        p = 1.0;
        s = a + 1.0;
        an = 0.0;
        bn = 1.0;
        anp1 = 1.0;
        bnp1 = c / c1;
        r = c1 / c;
        while (true) {
            n++;
            t = n / a;
            w = n * (b - n) * x;
            e = a / s;
            alpha = p * (p + c0) * e * e * (w * x);
            e = (1.0 + t) / (c1 + t + t);
            beta = n + w / s + e * (c + n * yp1);
            p = 1.0 + t;
            s = s + 2.0;
            t = alpha * an + beta * anp1;
            an = anp1;
            anp1 = t;
            t = alpha * bn + beta * bnp1;
            bn = bnp1;
            bnp1 = t;
            r0 = r;
            r = anp1 / bnp1;
            if (Math.abs(r - r0) <= eps * r)
                break;
            an = an / bnp1;
            bn = bn / bnp1;
            anp1 = r;
            bnp1 = 1.0;
        }
        dResult *= r;
        return dResult;
    };
    Toms708.bgrat = function (a, b, x, y, w, eps, ierr) {
        var j = 0.0;
        var l = 0.0;
        var lnx = 0.0;
        var nu = 0.0;
        var n2 = 0.0;
        var c = new Array(30);
        var d = new Array(30);
        var bm1 = 0.0;
        var nm1 = 0;
        var i = 0;
        var n = 0;
        var q = 0.0;
        var r = 0.0;
        var s = 0.0;
        var t = 0.0;
        var u = 0.0;
        var v = 0.0;
        var z = 0.0;
        var sum = 0.0;
        var bp2n = 0.0;
        var t2 = 0.0;
        var coef = 0.0;
        var dj = 0.0;
        var cn = 0.0;
        bm1 = b - 0.5 - 0.5;
        nu = a + 0.5 * bm1;
        if (y <= 0.375) {
            lnx = Toms708.alnrel(-y);
        }
        else {
            lnx = log(x);
        }
        z = -(nu * lnx);
        if (b * z !== 0.0) {
            r = b * (1.0 + Toms708.gam1(b)) * Math.exp(b * log(z));
            r *= Math.exp(a * lnx) * Math.exp(0.5 * bm1 * lnx);
            u = Toms708.algdiv(b, a) + b * log(nu);
            u = r * Math.exp(-u);
            if (u === 0.0) {
                ierr.val = 1;
                return;
            }
            var p1 = new NumberW_1.NumberW(0);
            var q1 = new NumberW_1.NumberW(0);
            Toms708.grat1(b, z, r, p1, q1, eps);
            q = q1.val;
            v = 0.25 * Math.pow(1.0 / nu, 2);
            t2 = 0.25 * lnx * lnx;
            l = w.val / u;
            j = q / r;
            sum = j;
            t = 1.0;
            cn = 1.0;
            n2 = 0.0;
            for (n = 1; n <= 30; n++) {
                bp2n = b + n2;
                j = (bp2n * (bp2n + 1.0) * j + (z + bp2n + 1.0) * t) * v;
                n2 = n2 + 2.0;
                t *= t2;
                cn /= n2 * (n2 + 1.0);
                c[n - 1] = cn;
                s = 0.0;
                if (n !== 1) {
                    nm1 = n - 1;
                    coef = b - n;
                    for (i = 1; i <= nm1; i++) {
                        s += coef * c[i - 1] * d[n - i - 1];
                        coef += b;
                    }
                }
                d[n - 1] = bm1 * cn + s / n;
                dj = d[n - 1] * j;
                sum += dj;
                if (sum <= 0.0) {
                    ierr.val = 1;
                    return;
                }
                if (Math.abs(dj) <= eps * (sum + l)) {
                    break;
                }
            }
            ierr.val = 0;
            w.val += u * sum;
            return;
        }
        else {
            ierr.val = 1;
            return;
        }
    };
    Toms708.brcomp = function (a, b, x, y) {
        var Const = 0.398942280401433;
        if (x === 0.0 || y === 0.0)
            return 0;
        var b0;
        var a0 = Math.min(a, b);
        var lnx;
        var lny;
        var c;
        if (a0 < 8.0) {
            if (x <= 0.375) {
                lnx = log(x);
                lny = Toms708.alnrel(-x);
            }
            else {
                if (y <= 0.375) {
                    lnx = Toms708.alnrel(-y);
                    lny = log(y);
                }
                else {
                    lnx = log(x);
                    lny = log(y);
                }
                var z_1 = a * lnx + b * lny;
                if (a0 >= 1.0) {
                    z_1 -= Toms708.betaln(a, b);
                    return Math.exp(z_1);
                }
                b0 = Math.max(a, b);
                if (b0 < 8.0) {
                    if (b0 <= 1.0) {
                        var dResult = Math.exp(z_1);
                        if (dResult === 0.0)
                            return 0;
                        var apb = a + b;
                        if (apb <= 1.0) {
                            z_1 = 1.0 + Toms708.gam1(apb);
                        }
                        else {
                            var u_1 = a + b - 1.0;
                            z_1 = (1.0 + Toms708.gam1(u_1)) / apb;
                        }
                        c = (1.0 + Toms708.gam1(a)) * (1.0 + Toms708.gam1(b)) / z_1;
                        dResult *= a0 * c / (1.0 + a0 / b0);
                        return dResult;
                    }
                }
                else {
                    var u_2 = Toms708.gamln1(a0);
                    var n = b0 - 1.0;
                    if (n >= 1) {
                        c = 1.0;
                        for (var i = 1; i <= n; i++) {
                            b0--;
                            c *= b0 / (a0 + b0);
                        }
                        u_2 = log(c) + u_2;
                    }
                    z_1 -= u_2;
                    b0--;
                    var apb = a0 + b0;
                    var t = void 0;
                    if (apb <= 1.0) {
                        t = 1.0 + Toms708.gam1(apb);
                    }
                    else {
                        u_2 = a0 + b0 - 1.0;
                        t = (1.0 + Toms708.gam1(u_2)) / apb;
                    }
                    return a0 * Math.exp(z_1) * (1.0 + Toms708.gam1(b0)) / t;
                }
                var u_3 = Toms708.gamln1(a0) + Toms708.algdiv(a0, b0);
                return a0 * Math.exp(z_1 - u_3);
            }
        }
        var x0;
        var y0;
        var lambda;
        var e;
        var h;
        var u;
        var v;
        if (a <= b) {
            h = a / b;
            x0 = h / (1.0 + h);
            y0 = 1.0 / (1.0 + h);
            lambda = a - (a + b) * x;
        }
        else {
            h = b / a;
            x0 = 1.0 / (1.0 + h);
            y0 = h / (1.0 + h);
            lambda = (a + b) * y - b;
        }
        e = -lambda / a;
        if (Math.abs(e) <= 0.6) {
            u = Toms708.rlog1(e);
        }
        else {
            u = e - log(x / x0);
        }
        e = lambda / b;
        if (Math.abs(e) > 0.6) {
            v = Toms708.rlog1(e);
        }
        else {
            v = e - log(y / y0);
        }
        var z = Math.exp(-(a * u + b * v));
        return Const * Math.sqrt(b * x0) * z * Math.exp(-Toms708.bcorr(a, b));
    };
    Toms708.brcmp1 = function (mu, a, b, x, y) {
        var invSqrtPi = 0.398942280401433;
        var c;
        var u;
        var apb;
        var a0 = Math.min(a, b);
        if (a0 < 8.0) {
            var lnx = void 0;
            var lny = void 0;
            if (x <= 0.375) {
                lnx = log(x);
                lny = Toms708.alnrel(-x);
            }
            else {
                if (y <= 0.375) {
                    lnx = Toms708.alnrel(-y);
                    lny = log(y);
                }
                else {
                    lnx = log(x);
                    lny = log(y);
                }
            }
            var z_2 = a * lnx + b * lny;
            if (a0 <= 1.0) {
                z_2 -= Toms708.betaln(a, b);
                return Toms708.esum(mu, z_2);
            }
            var b0 = Math.max(a, b);
            if (b0 >= 8.0) {
                u = Toms708.gamln1(a0) + Toms708.algdiv(a0, b0);
                return a0 * Toms708.esum(mu, z_2 - u);
            }
            if (b0 <= 1.0) {
                var dResult = Toms708.esum(mu, z_2);
                if (dResult === 0.0)
                    return 0;
                apb = a + b;
                if (apb <= 1.0) {
                    z_2 = 1.0 + Toms708.gam1(apb);
                }
                else {
                    u = a + b - 1.0;
                    z_2 = (1.0 + Toms708.gam1(u)) / apb;
                }
                c = (1.0 + Toms708.gam1(a)) * (1.0 + Toms708.gam1(b)) / z_2;
                dResult *= a0 * c / (1.0 + a0 / b0);
                return dResult;
            }
            u = Toms708.gamln1(a0);
            var n = trunc(b0 - 1.0);
            if (n >= 1) {
                c = 1.0;
                for (var i = 1; i <= n; i++) {
                    b0 -= 1.0;
                    c = c * (b0 / (a0 + b0));
                }
                u = log(c) + u;
            }
            z_2 -= u;
            b0 -= 1.0;
            apb = a0 + b0;
            var t = void 0;
            if (apb <= 1.0) {
                t = 1.0 + Toms708.gam1(apb);
            }
            else {
                u = a0 + b0 - 1.0;
                t = (1.0 + Toms708.gam1(u)) / apb;
            }
            return a0 * Toms708.esum(mu, z_2) * (1.0 + Toms708.gam1(b0)) / t;
        }
        var h;
        var x0;
        var y0;
        var lambda;
        if (a <= b) {
            h = a / b;
            x0 = h / (1.0 + h);
            y0 = 1.0 / (1.0 + h);
            lambda = a - (a + b) * x;
        }
        else {
            h = b / a;
            x0 = 1.0 / (1.0 + h);
            y0 = h / (1.0 + h);
            lambda = (a + b) * y - b;
        }
        var e = -lambda / a;
        if (Math.abs(e) <= 0.6) {
            u = Toms708.rlog1(e);
        }
        else {
            u = e - log(x / x0);
        }
        e = lambda / b;
        var v;
        if (Math.abs(e) <= 0.6) {
            v = Toms708.rlog1(e);
        }
        else {
            v = e - log(y / y0);
        }
        var z = Toms708.esum(mu, -(a * u + b * v));
        return invSqrtPi * Math.sqrt(b * x0) * z * Math.exp(-Toms708.bcorr(a, b));
    };
    Toms708.bpser = function (a, b, x, eps) {
        var n = 0.0;
        var apb = 0.0;
        var c = 0.0;
        var i = 0;
        var m = 0;
        var t = 0.0;
        var u = 0.0;
        var w = 0.0;
        var z = 0.0;
        var tol = 0.0;
        var sum = 0.0;
        var a0 = 0.0;
        var b0 = 0.0;
        var dResult = 0;
        if (x === 0.0) {
            return 0;
        }
        a0 = Math.min(a, b);
        if (a0 >= 1.0) {
            z = a * log(x) - Toms708.betaln(a, b);
            dResult = Math.exp(z) / a;
        }
        else {
            b0 = Math.max(a, b);
            if (b0 < 8.0) {
                if (b0 <= 1.0) {
                    dResult = Math.pow(x, a);
                    if (dResult === 0.0) {
                        return 0;
                    }
                    apb = a + b;
                    if (apb <= 1.0) {
                        z = 1.0 + Toms708.gam1(apb);
                    }
                    else {
                        u = a + b - 1.0;
                        z = (1.0 + Toms708.gam1(u)) / apb;
                    }
                    c = (1.0 + Toms708.gam1(a)) * (1.0 + Toms708.gam1(b)) / z;
                    dResult *= c * (b / apb);
                }
                else {
                    u = Toms708.gamln1(a0);
                    m = trunc(b0 - 1.0);
                    if (m >= 1) {
                        c = 1.0;
                        for (i = 1; i <= m; i++) {
                            b0--;
                            c *= b0 / (a0 + b0);
                        }
                        u = log(c) + u;
                    }
                    z = a * log(x) - u;
                    b0--;
                    apb = a0 + b0;
                    if (apb <= 1.0) {
                        t = 1.0 + Toms708.gam1(apb);
                    }
                    else {
                        u = a0 + b0 - 1.0;
                        t = (1.0 + Toms708.gam1(u)) / apb;
                    }
                    dResult = Math.exp(z) * (a0 / a) * (1.0 + Toms708.gam1(b0)) / t;
                }
            }
            else {
                u = Toms708.gamln1(a0) + Toms708.algdiv(a0, b0);
                z = a * log(x) - u;
                dResult = a0 / a * Math.exp(z);
            }
        }
        if (dResult === 0.0 || a <= 0.1 * eps) {
            return dResult;
        }
        sum = 0.0;
        n = 0.0;
        c = 1.0;
        tol = eps / a;
        do {
            n++;
            c *= (0.5 + (0.5 - b / n)) * x;
            w = c / (a + n);
            sum += w;
        } while (Math.abs(w) > tol);
        dResult *= 1.0 + a * sum;
        return dResult;
    };
    Toms708.bratio = function (a, b, x, y, w, w1, ierr) {
        var lambda = 0.0;
        var ind = 0;
        var n = 0;
        var t = 0.0;
        var eps = 0.0;
        var z = 0.0;
        var a0 = 0.0;
        var b0 = 0.0;
        var x0 = 0.0;
        var y0 = 0.0;
        eps = Toms708.spmpar(1);
        printer_bratio('eps is: %d', eps);
        w.val = 0.0;
        w1.val = 0.0;
        if (a < 0.0 || b < 0.0) {
            ierr.val = 1;
            return;
        }
        if (a === 0.0 && b === 0.0) {
            ierr.val = 2;
            return;
        }
        if (x < 0.0 || x > 1.0) {
            ierr.val = 3;
            return;
        }
        if (y < 0.0 || y > 1.0) {
            ierr.val = 4;
            return;
        }
        z = x + y - 0.5 - 0.5;
        if (abs(z) > 3.0 * eps) {
            ierr.val = 5;
            return;
        }
        ierr.val = 0;
        if (x === 0.0) {
            if (a === 0.0) {
                ierr.val = 6;
                return;
            }
            else {
                w.val = 0.0;
                w1.val = 1.0;
                return;
            }
        }
        if (y === 0.0) {
            if (b === 0.0) {
                ierr.val = 7;
                return;
            }
            else {
                w.val = 1.0;
                w1.val = 0.0;
                return;
            }
        }
        if (a === 0.0) {
            w.val = 1.0;
            w1.val = 0.0;
            return;
        }
        if (b === 0.0) {
            w.val = 0.0;
            w1.val = 1.0;
            return;
        }
        eps = Math.max(eps, 1e-15);
        if (Math.max(a, b) < 1.0e-3 * eps) {
            w.val = b / (a + b);
            w1.val = a / (a + b);
            return;
        }
        ind = 0;
        a0 = a;
        b0 = b;
        x0 = x;
        y0 = y;
        if (min(a0, b0) <= 1.0) {
            if (x <= 0.5) {
                ind = 1;
                a0 = b;
                b0 = a;
                x0 = y;
                y0 = x;
            }
            if (b0 < min(eps, eps * a0)) {
                w.val = Toms708.fpser(a0, b0, x0, eps);
                w1.val = 0.5 + (0.5 - w.val);
                if (ind === 0) {
                    return;
                }
                else {
                    t = w.val;
                    w.val = w1.val;
                    w1.val = t;
                    return;
                }
            }
            if (a0 < min(eps, eps * b0) && b0 * x0 <= 1.0) {
                w1.val = Toms708.apser(a0, b0, x0, eps);
                w.val = 0.5 + (0.5 - w1.val);
                if (ind === 0) {
                    return;
                }
                else {
                    t = w.val;
                    w.val = w1.val;
                    w1.val = t;
                    return;
                }
            }
            if (Math.max(a0, b0) <= 1.0) {
                if (a0 >= Math.min(0.2, b0) || Math.pow(x0, a0) <= 0.9) {
                    w.val = Toms708.bpser(a0, b0, x0, eps);
                    w1.val = 0.5 + (0.5 - w.val);
                    if (ind === 0) {
                        return;
                    }
                    else {
                        t = w.val;
                        w.val = w1.val;
                        w1.val = t;
                        return;
                    }
                }
                if (x0 >= 0.3) {
                    w1.val = Toms708.bpser(b0, a0, y0, eps);
                    w.val = 0.5 + (0.5 - w1.val);
                    if (ind === 0) {
                        return;
                    }
                    else {
                        t = w.val;
                        w.val = w1.val;
                        w1.val = t;
                        return;
                    }
                }
                n = 20;
                w1.val = Toms708.bup(b0, a0, y0, x0, n, eps);
                b0 += n;
                var ierr1_1 = new NumberW_1.NumberW(0);
                Toms708.bgrat(b0, a0, y0, x0, w1, 15.0 * eps, ierr1_1);
                w.val = 0.5 + (0.5 - w1.val);
                if (ind === 0) {
                    return;
                }
                else {
                    t = w.val;
                    w.val = w1.val;
                    w1.val = t;
                    return;
                }
            }
            if (b0 <= 1.0) {
                w.val = Toms708.bpser(a0, b0, x0, eps);
                w1.val = 0.5 + (0.5 - w.val);
                if (ind === 0) {
                    return;
                }
                else {
                    t = w.val;
                    w.val = w1.val;
                    w1.val = t;
                    return;
                }
            }
            if (x0 >= 0.3) {
                w1.val = Toms708.bpser(b0, a0, y0, eps);
                w.val = 0.5 + (0.5 - w1.val);
                if (ind === 0) {
                    return;
                }
                else {
                    t = w.val;
                    w.val = w1.val;
                    w1.val = t;
                    return;
                }
            }
            if (x0 < 0.1) {
                if (pow(x0 * b0, a0) <= 0.7) {
                    w.val = Toms708.bpser(a0, b0, x0, eps);
                    w1.val = 0.5 + (0.5 - w.val);
                    if (ind === 0) {
                        return;
                    }
                    else {
                        t = w.val;
                        w.val = w1.val;
                        w1.val = t;
                        return;
                    }
                }
            }
            if (b0 > 15.0) {
                var ierr1_2 = new NumberW_1.NumberW(0);
                Toms708.bgrat(b0, a0, y0, x0, w1, 15.0 * eps, ierr1_2);
                w.val = 0.5 + (0.5 - w1.val);
                if (ind === 0) {
                    return;
                }
                else {
                    t = w.val;
                    w.val = w1.val;
                    w1.val = t;
                    return;
                }
            }
            n = 20;
            w1.val = Toms708.bup(b0, a0, y0, x0, n, eps);
            b0 += n;
            var ierr1 = new NumberW_1.NumberW(0);
            Toms708.bgrat(b0, a0, y0, x0, w1, 15.0 * eps, ierr1);
            w.val = 0.5 + (0.5 - w1.val);
            if (ind === 0) {
                return;
            }
            else {
                t = w.val;
                w.val = w1.val;
                w1.val = t;
                return;
            }
        }
        if (a <= b) {
            lambda = a - (a + b) * x;
        }
        else {
            lambda = (a + b) * y - b;
        }
        if (lambda < 0.0) {
            ind = 1;
            a0 = b;
            b0 = a;
            x0 = y;
            y0 = x;
            lambda = abs(lambda);
        }
        if (b0 < 40.0 && b0 * x0 <= 0.7) {
            w.val = Toms708.bpser(a0, b0, x0, eps);
            w1.val = 0.5 + (0.5 - w.val);
            if (ind === 0) {
                return;
            }
            else {
                t = w.val;
                w.val = w1.val;
                w1.val = t;
                return;
            }
        }
        if (b0 < 40.0) {
            n = Math.trunc(b0);
            b0 -= n;
            if (b0 === 0.0) {
                n--;
                b0 = 1.0;
            }
            w.val = Toms708.bup(b0, a0, y0, x0, n, eps);
            if (x0 <= 0.7) {
                w.val += Toms708.bpser(a0, b0, x0, eps);
                w1.val = 0.5 + (0.5 - w.val);
                if (ind === 0) {
                    return;
                }
                else {
                    t = w.val;
                    w.val = w1.val;
                    w1.val = t;
                    return;
                }
            }
            if (a0 <= 15.0) {
                n = 20;
                w.val += Toms708.bup(a0, b0, x0, y0, n, eps);
                a0 += n;
            }
            var ierr1 = new NumberW_1.NumberW(0);
            Toms708.bgrat(a0, b0, x0, y0, w, 15.0 * eps, ierr1);
            w1.val = 0.5 + (0.5 - w.val);
            if (ind === 0) {
                return;
            }
            else {
                t = w.val;
                w.val = w1.val;
                w1.val = t;
                return;
            }
        }
        if (a0 <= b0) {
            if (a0 <= 100.0) {
                w.val = Toms708.bfrac(a0, b0, x0, y0, lambda, 15.0 * eps);
                w1.val = 0.5 + (0.5 - w.val);
                if (ind === 0) {
                    return;
                }
                else {
                    t = w.val;
                    w.val = w1.val;
                    w1.val = t;
                    return;
                }
            }
            if (lambda > 0.03 * a0) {
                w.val = Toms708.bfrac(a0, b0, x0, y0, lambda, 15.0 * eps);
                w1.val = 0.5 + (0.5 - w.val);
                if (ind === 0) {
                    return;
                }
                else {
                    t = w.val;
                    w.val = w1.val;
                    w1.val = t;
                    return;
                }
            }
            w.val = Toms708.basym(a0, b0, lambda, 100.0 * eps);
            w1.val = 0.5 + (0.5 - w.val);
            if (ind === 0) {
                return;
            }
            else {
                t = w.val;
                w.val = w1.val;
                w1.val = t;
                return;
            }
        }
        else {
            if (b0 <= 100.0 || lambda > 0.03 * b0) {
                w.val = Toms708.bfrac(a0, b0, x0, y0, lambda, 15.0 * eps);
                w1.val = 0.5 + (0.5 - w.val);
                if (ind === 0) {
                    return;
                }
                else {
                    t = w.val;
                    w.val = w1.val;
                    w1.val = t;
                    return;
                }
            }
            w.val = Toms708.basym(a0, b0, lambda, 100.0 * eps);
            w1.val = 0.5 + (0.5 - w.val);
            if (ind === 0) {
                return;
            }
            else {
                t = w.val;
                w.val = w1.val;
                w1.val = t;
                return;
            }
        }
    };
    Toms708.bup = function (a, b, x, y, n, eps) {
        var dResult;
        var mu = 0;
        var d = 1.0;
        var t = 0;
        var r = 0;
        var w = 0;
        var k;
        var l;
        var apb = a + b;
        var ap1 = a + 1.0;
        if (n !== 1 && a > 1.0) {
            if (apb >= 1.1 * ap1) {
                mu = trunc(Math.abs(Toms708.exparg(1)));
                k = trunc(Toms708.exparg(0));
                if (k < mu) {
                    mu = k;
                }
                t = mu;
                d = Math.exp(-t);
            }
        }
        dResult = Toms708.brcmp1(mu, a, b, x, y) / a;
        if (n === 1 || dResult === 0.0) {
            return dResult;
        }
        var nm1 = n - 1;
        w = d;
        k = 0;
        if (b <= 1.0) {
            var kp1_1 = k + 1;
            for (var i = kp1_1; i <= nm1; i++) {
                l = i - 1;
                d = (apb + l) / (ap1 + l) * x * d;
                w += d;
                if (d <= eps * w)
                    break;
            }
            return dResult * w;
        }
        if (y > 1.0e-4) {
            r = (b - 1.0) * x / y - a;
            if (r < 1.0) {
                var kp1_2 = k + 1;
                for (var i = kp1_2; i <= nm1; i++) {
                    l = i - 1;
                    d = (apb + l) / (ap1 + l) * x * d;
                    w += d;
                    if (d <= eps * w)
                        break;
                }
                return dResult * w;
            }
            k = nm1;
            t = nm1;
            if (r < t) {
                k = trunc(r);
            }
        }
        else {
            k = nm1;
        }
        for (var i = 1; i <= k; i++) {
            l = i - 1;
            d = (apb + l) / (ap1 + l) * x * d;
            w += d;
        }
        if (k === nm1) {
            return dResult * w;
        }
        var kp1 = k + 1;
        for (var i = kp1; i <= nm1; i++) {
            l = i - 1;
            d = (apb + l) / (ap1 + l) * x * d;
            w += d;
            if (d <= eps * w)
                break;
        }
        return dResult * w;
    };
    Toms708.erf = function (x) {
        var c = 0.564189583547756;
        var a = [
            0.77105849500132e-4,
            -0.133733772997339e-2,
            0.323076579225834e-1,
            0.479137145607681e-1,
            0.128379167095513
        ];
        var b = [0.301048631703895e-2, 0.538971687740286e-1, 0.375795757275549];
        var p = [
            -1.36864857382717e-7,
            5.64195517478974e-1,
            7.21175825088309,
            4.31622272220567e1,
            1.5298928504694e2,
            3.39320816734344e2,
            4.51918953711873e2,
            3.00459261020162e2
        ];
        var q = [
            1.0,
            1.27827273196294e1,
            7.70001529352295e1,
            2.77585444743988e2,
            6.38980264465631e2,
            9.3135409485061e2,
            7.90950925327898e2,
            3.00459260956983e2
        ];
        var r = [
            2.10144126479064,
            2.62370141675169e1,
            2.13688200555087e1,
            4.6580782871847,
            2.82094791773523e-1
        ];
        var s = [
            9.4153775055546e1,
            1.8711481179959e2,
            9.90191814623914e1,
            1.80124575948747e1
        ];
        var ax = 0.0;
        var bot = 0.0;
        var t = 0.0;
        var top = 0.0;
        var x2 = 0.0;
        ax = Math.abs(x);
        if (ax <= 0.5) {
            t = x * x;
            top = (((a[0] * t + a[1]) * t + a[2]) * t + a[3]) * t + a[4] + 1.0;
            bot = ((b[0] * t + b[1]) * t + b[2]) * t + 1.0;
            return x * (top / bot);
        }
        else {
            if (ax <= 4.0) {
                top =
                    ((((((p[0] * ax + p[1]) * ax + p[2]) * ax + p[3]) * ax + p[4]) * ax +
                        p[5]) *
                        ax +
                        p[6]) *
                        ax +
                        p[7];
                bot =
                    ((((((q[0] * ax + q[1]) * ax + q[2]) * ax + q[3]) * ax + q[4]) * ax +
                        q[5]) *
                        ax +
                        q[6]) *
                        ax +
                        q[7];
                return x < 0
                    ? -(0.5 + (0.5 - Math.exp(-x * x) * top / bot))
                    : 0.5 + (0.5 - Math.exp(-x * x) * top / bot);
            }
            else {
                if (ax < 5.8) {
                    x2 = x * x;
                    t = 1.0 / x2;
                    top = (((r[0] * t + r[1]) * t + r[2]) * t + r[3]) * t + r[4];
                    bot = (((s[0] * t + s[2]) * t + s[3]) * t + s[3]) * t + 1.0;
                    var dResult = (c - top / (x2 * bot)) / ax;
                    dResult = 0.5 + (0.5 - Math.exp(-x2) * dResult);
                    return x < 0 ? -dResult : dResult;
                }
                else {
                    return Toms708.sign(1.0, x);
                }
            }
        }
    };
    Toms708.erfc1 = function (ind, x) {
        var c = 0.564189583547756;
        var a = [
            0.77105849500132e-4,
            -0.133733772997339e-2,
            0.323076579225834e-1,
            0.479137145607681e-1,
            0.128379167095513
        ];
        var b = [0.301048631703895e-2, 0.538971687740286e-1, 0.375795757275549];
        var p = [
            -1.36864857382717e-7,
            5.64195517478974e-1,
            7.21175825088309,
            4.31622272220567e1,
            1.5298928504694e2,
            3.39320816734344e2,
            4.51918953711873e2,
            3.00459261020162e2
        ];
        var q = [
            1.0,
            1.27827273196294e1,
            7.70001529352295e1,
            2.77585444743988e2,
            6.38980264465631e2,
            9.3135409485061e2,
            7.90950925327898e2,
            3.00459260956983e2
        ];
        var r = [
            2.10144126479064,
            2.62370141675169e1,
            2.13688200555087e1,
            4.6580782871847,
            2.82094791773523e-1
        ];
        var s = [
            9.4153775055546e1,
            1.8711481179959e2,
            9.90191814623914e1,
            1.80124575948747e1
        ];
        var dResult = 0.0;
        var w = 0.0;
        var ax = 0.0;
        var e = 0.0;
        var bot = 0.0;
        var t = 0.0;
        var top = 0.0;
        ax = Math.abs(x);
        if (ax < 0.5) {
            t = x * x;
            top = (((a[0] * t + a[1]) * t + a[2]) * t + a[3]) * t + a[4] + 1.0;
            bot = ((b[0] * t + b[1]) * t + b[2]) * t + 1.0;
            dResult = 0.5 + (0.5 - x * (top / bot));
            if (ind !== 0)
                dResult *= Math.exp(t);
            return dResult;
        }
        else if (ax <= 4 && ax >= 0.5) {
            top =
                ((((((p[0] * ax + p[1]) * ax + p[2]) * ax + p[3]) * ax + p[4]) * ax +
                    p[5]) *
                    ax +
                    p[6]) *
                    ax +
                    p[7];
            bot =
                ((((((q[0] * ax + q[2]) * ax + q[2]) * ax + q[3]) * ax + q[5]) * ax +
                    q[5]) *
                    ax +
                    q[6]) *
                    ax +
                    q[7];
            dResult = top / bot;
        }
        else {
            if (x <= -5.6) {
                if (ind !== 0)
                    return 2.0 * Math.exp(x * x);
                else
                    return 2.0;
            }
            if (ind !== 0) {
                t = Math.pow(1.0 / x, 2);
                top = (((r[0] * t + r[1]) * t + r[2]) * t + r[3]) * t + r[4];
                bot = (((s[0] * t + s[2]) * t + s[3]) * t + s[3]) * t + 1.0;
                dResult = (c - t * top / bot) / ax;
            }
            else {
                if (x > 100.0 || x * x > -Toms708.exparg(1)) {
                    return 0;
                }
            }
        }
        if (ind !== 0) {
            if (x < 0.0)
                dResult = 2.0 * Math.exp(x * x) - dResult;
            return dResult;
        }
        w = x * x;
        t = w;
        e = w - t;
        dResult *= (0.5 + (0.5 - e)) * Math.exp(-t);
        if (x < 0.0)
            dResult = 2.0 - dResult;
        return dResult;
    };
    Toms708.esum = function (mu, x) {
        var w = 0.0;
        if (x <= 0.0) {
            if (mu < 0) {
                w = mu;
                return Math.exp(w) * Math.exp(x);
            }
            w = mu + x;
            if (w > 0.0) {
                w = mu;
                return Math.exp(w) * Math.exp(x);
            }
            return Math.exp(w);
        }
        if (mu > 0) {
            w = mu;
            return Math.exp(w) * Math.exp(x);
        }
        w = mu + x;
        if (w < 0.0) {
            w = mu;
            return Math.exp(w) * Math.exp(x);
        }
        return Math.exp(w);
    };
    Toms708.erf_values = function (nData, x, fx) {
        var nmax = 21;
        var bvec = [
            0.0,
            0.112462916,
            0.2227025892,
            0.3286267595,
            0.428392355,
            0.5204998778,
            0.6038560908,
            0.6778011938,
            0.7421009647,
            0.7969082124,
            0.8427007929,
            0.8802050696,
            0.9103139782,
            0.9340079449,
            0.9522851198,
            0.9661051465,
            0.9763483833,
            0.9837904586,
            0.9890905016,
            0.9927904292,
            0.995322265
        ];
        var xvec = [
            0.0,
            0.1,
            0.2,
            0.3,
            0.4,
            0.5,
            0.6,
            0.7,
            0.8,
            0.9,
            1.0,
            1.1,
            1.2,
            1.3,
            1.4,
            1.5,
            1.6,
            1.7,
            1.8,
            1.9,
            2.0
        ];
        if (nData.val < 0)
            nData.val = 0;
        nData.val++;
        if (nmax < nData.val) {
            nData.val = 0;
            x.val = 0.0;
            fx.val = 0.0;
        }
        else {
            x.val = xvec[nData.val - 1];
            fx.val = bvec[nData.val - 1];
        }
    };
    Toms708.exparg = function (l) {
        var lnb = 0.0;
        var m = 0;
        var b = Toms708.ipmpar(4);
        switch (b) {
            case 2:
                lnb = 0.69314718055995;
                break;
            case 8:
                lnb = 2.0794415416798;
                break;
            case 16:
                lnb = 2.7725887222398;
                break;
            default:
                lnb = log(b);
                break;
        }
        if (l !== 0) {
            m = Toms708.ipmpar(6);
            return 0.99999 * m * lnb;
        }
        else {
            m = Toms708.ipmpar(7);
            return 0.99999 * m * lnb;
        }
    };
    Toms708.fpser = function (a, b, x, eps) {
        var c = 0.0;
        var s = 0.0;
        var t = 0.0;
        var tol = 0.0;
        var an = 0.0;
        var dResult = 1.0;
        if (a > 1.0e-3 * eps) {
            dResult = 0.0;
            t = a * log(x);
            if (t < Toms708.exparg(1)) {
                return dResult;
            }
            dResult = Math.exp(t);
        }
        dResult = b / a * dResult;
        tol = eps / a;
        an = a + 1.0;
        t = x;
        s = t / an;
        do {
            an = an + 1.0;
            t = x * t;
            c = t / an;
            s = s + c;
        } while (Math.abs(c) > tol);
        return dResult * (1.0 + a * s);
    };
    Toms708.gam1 = function (a) {
        var p = [
            0.577215664901533,
            -0.409078193005776,
            -0.230975380857675,
            0.597275330452234e-1,
            0.76696818164949e-2,
            -0.514889771323592e-2,
            0.589597428611429e-3
        ];
        var q = [
            0.1e1,
            0.427569613095214,
            0.158451672430138,
            0.261132021441447e-1,
            0.423244297896961e-2
        ];
        var r = [
            -0.422784335098468,
            -0.771330383816272,
            -0.244757765222226,
            0.118378989872749,
            0.930357293360349e-3,
            -0.118290993445146e-1,
            0.223047661158249e-2,
            0.266505979058923e-3,
            -0.132674909766242e-3
        ];
        var s2 = 0.559398236957378e-1;
        var s1 = 0.273076135303957;
        var d = 0.0;
        var bot = 0.0;
        var t = 0.0;
        var w = 0.0;
        var top = 0.0;
        t = a;
        d = a - 0.5;
        if (d > 0.0) {
            t = d - 0.5;
        }
        if (t === 0) {
            return 0;
        }
        else if (t > 0) {
            top =
                (((((p[6] * t + p[5]) * t + p[4]) * t + p[3]) * t + p[2]) * t + p[1]) *
                    t +
                    p[0];
            bot = (((q[4] * t + q[3]) * t + q[2]) * t + q[1]) * t + 1.0;
            w = top / bot;
            if (d <= 0.0) {
                return a * w;
            }
            else {
                return t / a * (w - 0.5 - 0.5);
            }
        }
        else {
            top =
                (((((((r[8] * t + r[7]) * t + r[6]) * t + r[5]) * t + r[4]) * t +
                    r[3]) *
                    t +
                    r[2]) *
                    t +
                    r[1]) *
                    t +
                    r[0];
            bot = (s2 * t + s1) * t + 1.0;
            w = top / bot;
            if (d <= 0.0) {
                return a * (w + 0.5 + 0.5);
            }
            else {
                return t * w / a;
            }
        }
    };
    Toms708.grat1 = function (a, x, r, p, q, eps) {
        var j = 0.0;
        var l = 0.0;
        var am0 = 0.0;
        var an0 = 0.0;
        var a2n = 0.0;
        var b2n = 0.0;
        var cma = 0.0;
        var c = 0.0;
        var g = 0.0;
        var h = 0.0;
        var t = 0.0;
        var w = 0.0;
        var z = 0.0;
        var tol = 0.0;
        var sum = 0.0;
        var a2nm1 = 0.0;
        var b2nm1 = 0.0;
        var an = 0.0;
        if (a * x === 0.0) {
            if (x <= a) {
                p.val = 0.0;
                q.val = 1.0;
                return;
            }
            else {
                p.val = 1.0;
                q.val = 0.0;
                return;
            }
        }
        if (a === 0.5) {
            if (x < 0.25) {
                p.val = Toms708.erf(Math.sqrt(x));
                q.val = 0.5 + (0.5 - p.val);
                return;
            }
            else {
                q.val = Toms708.erfc1(0, Math.sqrt(x));
                p.val = 0.5 + (0.5 - q.val);
                return;
            }
        }
        if (x < 1.1) {
            an = 3.0;
            c = x;
            sum = x / (a + 3.0);
            tol = 0.1 * eps / (a + 1.0);
            do {
                an++;
                c = -c * (x / an);
                t = c / (a + an);
                sum = sum + t;
            } while (Math.abs(t) > tol);
            j = a * x * ((sum / 6.0 - 0.5 / (a + 2.0)) * x + 1.0 / (a + 1.0));
            z = a * log(x);
            h = Toms708.gam1(a);
            g = 1.0 + h;
            if (x < 0.25) {
                if (z > -0.13394) {
                    l = Toms708.rexp(z);
                    w = 0.5 + (0.5 + l);
                    q.val = (w * j - l) * g - h;
                    if (q.val < 0.0) {
                        p.val = 1.0;
                        q.val = 0.0;
                        return;
                    }
                    p.val = 0.5 + (0.5 - q.val);
                    return;
                }
                else {
                    w = Math.exp(z);
                    p.val = w * g * (0.5 + (0.5 - j));
                    q.val = 0.5 + (0.5 - p.val);
                    return;
                }
            }
            else {
                w = Math.exp(z);
                p.val = w * g * (0.5 + (0.5 - j));
                q.val = 0.5 + (0.5 - p.val);
                return;
            }
        }
        else {
            a2nm1 = 1.0;
            a2n = 1.0;
            b2nm1 = x;
            b2n = x + (1.0 - a);
            c = 1.0;
            do {
                a2nm1 = x * a2n + c * a2nm1;
                b2nm1 = x * b2n + c * b2nm1;
                am0 = a2nm1 / b2nm1;
                c++;
                cma = c - a;
                a2n = a2nm1 + cma * a2n;
                b2n = b2nm1 + cma * b2n;
                an0 = a2n / b2n;
            } while (Math.abs(an0 - am0) >= eps * an0);
            q.val = r * an0;
            p.val = 0.5 + (0.5 - q.val);
            return;
        }
    };
    Toms708.ipmpar = function (i) {
        var imach = [2, 31, 2147483647, 2, 24, -125, 128, 53, -1021, 1024];
        return imach[i - 1];
    };
    Toms708.gamma_inc_values = function (nData, a, x, fx) {
        var nMax = 20;
        var aVec = [
            0.1,
            0.1,
            0.1,
            0.5,
            0.5,
            0.5,
            0.1e1,
            0.1e1,
            0.1e1,
            0.11e1,
            0.11e1,
            0.11e1,
            0.2e1,
            0.2e1,
            0.2e1,
            0.6e1,
            0.6e1,
            0.11e2,
            0.26e2,
            0.41e2
        ];
        var fxVec = [
            0.7382350532339351,
            0.9083579897300343,
            0.9886559833621947,
            0.3014646416966613,
            0.7793286380801532,
            0.9918490284064973,
            0.9516258196404043e-1,
            0.6321205588285577,
            0.9932620530009145,
            0.7205974576054322e-1,
            0.5891809618706485,
            0.9915368159845525,
            0.01018582711118352,
            0.4421745996289254,
            0.9927049442755639,
            0.4202103819530612e-1,
            0.9796589705830716,
            0.9226039842296429,
            0.4470785799755852,
            0.7444549220718699
        ];
        var xVec = [
            0.3e-1,
            0.3,
            0.15e1,
            0.75e-1,
            0.75,
            0.35e1,
            0.1,
            0.1e1,
            0.5e1,
            0.1,
            0.1e1,
            0.5e1,
            0.15,
            0.15e1,
            0.7e1,
            0.25e1,
            0.12e2,
            0.16e2,
            0.25e2,
            0.45e2
        ];
        if (nData.val < 0)
            nData.val = 0;
        nData.val++;
        if (nMax < nData.val) {
            nData.val = 0;
            a.val = 0.0;
            x.val = 0.0;
            fx.val = 0.0;
        }
        else {
            a.val = aVec[nData.val - 1];
            x.val = xVec[nData.val - 1];
            fx.val = fxVec[nData.val - 1];
        }
    };
    Toms708.gamma_log_values = function (nData, x, fx) {
        var nmax = 18;
        var bvec = [
            1.524064183,
            0.7966780066,
            0.3982337117,
            0.1520599127,
            0.0,
            -0.04987246543,
            -0.08537410945,
            -0.1081747934,
            -0.119612895,
            -0.120782204,
            -0.1125917658,
            -0.09580771625,
            -0.07108385116,
            -0.0389842838,
            0.0,
            12.80182743,
            39.33988571,
            71.25704193
        ];
        var xvec = [
            0.2,
            0.4,
            0.6,
            0.8,
            1.0,
            1.1,
            1.2,
            1.3,
            1.4,
            1.5,
            1.6,
            1.7,
            1.8,
            1.9,
            2.0,
            10.0,
            20.0,
            30.0
        ];
        if (nData.val < 0)
            nData.val = 0;
        nData.val++;
        if (nmax < nData.val) {
            nData.val = 0;
            x.val = 0.0;
            fx.val = 0.0;
        }
        else {
            x.val = xvec[nData.val - 1];
            fx.val = bvec[nData.val - 1];
        }
    };
    Toms708.gamln = function (a) {
        var d = 0.418938533204673;
        var c5 = -0.165322962780713e-2;
        var c4 = 0.837308034031215e-3;
        var c3 = -0.59520293135187e-3;
        var c2 = 0.79365066682539e-3;
        var c1 = -0.277777777760991e-2;
        var c0 = 0.833333333333333e-1;
        var i = 0;
        var n = 0;
        var t = 0.0;
        var w = 0.0;
        if (a <= 0.8)
            return Toms708.gamln1(a) - log(a);
        if (a <= 2.25) {
            t = a - 0.5 - 0.5;
            return Toms708.gamln1(t);
        }
        if (a < 10.0) {
            n = trunc(a - 1.25);
            t = a;
            w = 1.0;
            for (i = 1; i <= n; i++) {
                t--;
                w *= t;
            }
            return Toms708.gamln1(t - 1.0) + log(w);
        }
        t = Math.pow(1.0 / a, 2);
        w = (((((c5 * t + c4) * t + c3) * t + c2) * t + c1) * t + c0) / a;
        return d + w + (a - 0.5) * (log(a) - 1.0);
    };
    Toms708.gamln1 = function (a) {
        var p6 = -0.271935708322958e-2;
        var p5 = -0.673562214325671e-1;
        var p4 = -0.402055799310489;
        var p3 = -0.780427615533591;
        var p2 = -0.168860593646662;
        var p1 = 0.844203922187225;
        var p0 = 0.577215664901533;
        var q6 = 0.667465618796164e-3;
        var q5 = 0.325038868253937e-1;
        var q4 = 0.361951990101499;
        var q3 = 0.156875193295039e1;
        var q2 = 0.312755088914843e1;
        var q1 = 0.288743195473681e1;
        var r5 = 0.497958207639485e-3;
        var r4 = 0.17050248402265e-1;
        var r3 = 0.156513060486551;
        var r2 = 0.565221050691933;
        var r1 = 0.848044614534529;
        var r0 = 0.422784335098467;
        var s5 = 0.116165475989616e-3;
        var s4 = 0.713309612391e-2;
        var s3 = 0.10155218743983;
        var s2 = 0.548042109832463;
        var s1 = 0.124313399877507e1;
        var w = 0.0;
        var x = 0.0;
        if (a < 0.6) {
            w =
                ((((((p6 * a + p5) * a + p4) * a + p3) * a + p2) * a + p1) * a + p0) /
                    ((((((q6 * a + q5) * a + q4) * a + q3) * a + q2) * a + q1) * a + 1.0);
            return -a * w;
        }
        x = a - 0.5 - 0.5;
        w =
            (((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x + r0) /
                (((((s5 * x + s4) * x + s3) * x + s2) * x + s1) * x + 1.0);
        return x * w;
    };
    Toms708.gsumln = function (a, b) {
        var x = a + b - 2;
        if (x <= 0.25)
            return Toms708.gamln1(1.0 + x);
        if (x <= 1.25)
            return Toms708.gamln1(x) + Toms708.alnrel(x);
        return Toms708.gamln1(x - 1.0) + log(x * (1.0 + x));
    };
    Toms708.psi = function (xx) {
        var piov4 = 0.785398163397448;
        var dx0 = 1.461632144968362341262659542325721325;
        var p1 = [
            0.89538502298197e-2,
            0.477762828042627e1,
            0.142441585084029e3,
            0.118645200713425e4,
            0.363351846806499e4,
            0.413810161269013e4,
            0.130560269827897e4
        ];
        var q1 = [
            0.448452573429826e2,
            0.520752771467162e3,
            0.22100079924783e4,
            0.364127349079381e4,
            0.1908310765963e4,
            0.691091682714533e-5
        ];
        var p2 = [
            -0.212940445131011e1,
            -0.701677227766759e1,
            -0.448616543918019e1,
            -0.648157123766197
        ];
        var q2 = [
            0.322703493791143e2,
            0.892920700481861e2,
            0.546117738103215e2,
            0.777788548522962e1
        ];
        var nq = 0;
        var xsmall = 0.0;
        var xmax1 = 0.0;
        var den = 0.0;
        var i = 0;
        var aug = 0.0;
        var m = 0;
        var n = 0;
        var sgn = 0.0;
        var w = 0.0;
        var x = 0.0;
        var z = 0.0;
        var upper = 0.0;
        var xmx0 = 0.0;
        xmax1 = Toms708.ipmpar(3);
        xmax1 = Math.min(xmax1, 1.0 / Toms708.spmpar(1));
        xsmall = 1e-9;
        x = xx;
        aug = 0.0;
        if (x < 0.5) {
            if (Math.abs(x) <= xsmall) {
                if (x === 0.0)
                    return 0;
                aug = -1 / x;
            }
            else {
                w = -x;
                sgn = piov4;
                if (w <= 0.0) {
                    w = -w;
                    sgn = -sgn;
                }
                if (w >= xmax1)
                    return 0;
                nq = trunc(w);
                w = w - nq;
                nq = trunc(w * 4.0);
                w = 4.0 * (w - nq * 0.25);
                n = nq / 2;
                if (n + n !== nq) {
                    w = 1.0 - w;
                }
                z = piov4 * w;
                m = n / 2;
                if (m + m !== n) {
                    sgn = -sgn;
                }
                n = (nq + 1) / 2;
                m = n / 2;
                m = m + m;
                if (m === n) {
                    if (z === 0.0)
                        return 0;
                    aug = sgn * (Math.cos(z) / Math.sin(z) * 4.0);
                }
                else {
                    aug = sgn * (Math.sin(z) / Math.cos(z) * 4.0);
                }
            }
            x = 1 - x;
        }
        if (x <= 3.0) {
            den = x;
            upper = p1[1] * x;
            for (i = 0; i < 5; i++) {
                den = (den + q1[i]) * x;
                upper = (upper + p1[i + 1]) * x;
            }
            den = (upper + p1[6]) / (den + q1[5]);
            xmx0 = x - dx0;
            return den * xmx0 + aug;
        }
        if (x < xmax1) {
            w = 1.0 / (x * x);
            den = w;
            upper = p2[0] * w;
            for (i = 0; i < 3; i++) {
                den = (den + q2[i]) * w;
                upper = (upper + p2[i + 1]) * w;
            }
            aug = upper / (den + q2[3]) - 0.5 / x + aug;
        }
        return aug + log(x);
    };
    Toms708.psi_values = function (n, x, fx) {
        var nmax = 11;
        var fxvec = [
            -0.5772156649,
            -0.4237549404,
            -0.2890398966,
            -0.1691908889,
            -0.0613845446,
            -0.036489974,
            0.1260474528,
            0.2085478749,
            0.2849914333,
            0.3561841612,
            0.4227843351
        ];
        var xvec = [1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0];
        if (n.val < 0)
            n.val = 0;
        n.val++;
        if (nmax < n.val) {
            n.val = 0;
            x.val = 0.0;
            fx.val = 0.0;
        }
        else {
            x.val = xvec[n.val - 1];
            fx.val = fxvec[n.val - 1];
        }
    };
    Toms708.r4_epsilon = function () {
        var r = 1.0;
        var rTest = 1.0 + r / 2.0;
        while (1.0 < rTest) {
            r = r / 2.0;
            rTest = 1.0 + r / 2.0;
        }
        return r;
    };
    Toms708.rexp = function (x) {
        var q4 = 0.595130811860248e-3;
        var q3 = -0.119041179760821e-1;
        var q2 = 0.107141568980644;
        var q1 = -0.499999999085958;
        var p2 = 0.238082361044469e-1;
        var p1 = 0.914041914819518e-9;
        var w = 0.0;
        if (Math.abs(x) <= 0.15) {
            return (x *
                (((p2 * x + p1) * x + 1.0) / (((q4 * x + q3) * x + q2) * x + q1) * x +
                    1.0));
        }
        else {
            w = Math.exp(x);
            if (x <= 0.0) {
                return w - 0.5 - 0.5;
            }
            else {
                return w * (0.5 + (0.5 - 1.0 / w));
            }
        }
    };
    Toms708.rlog1 = function (x) {
        var a = 0.566749439387324e-1;
        var b = 0.456512608815524e-1;
        var p2 = 0.620886815375787e-2;
        var p1 = -0.224696413112536;
        var p0 = 0.333333333333333;
        var q2 = 0.354508718369557;
        var q1 = -0.127408923933623e1;
        var h = 0.0;
        var r = 0.0;
        var t = 0.0;
        var w = 0.0;
        var w1 = 0.0;
        if (x < -0.39 || x > 0.57) {
            w = x + 0.5 + 0.5;
            return x - log(w);
        }
        if (x < -0.18) {
            h = x + 0.3;
            h = h / 0.7;
            w1 = a - h * 0.3;
        }
        else if (x > 0.18) {
            h = 0.75 * x - 0.25;
            w1 = b + h / 3.0;
        }
        else {
            h = x;
            w1 = 0.0;
        }
        r = h / (h + 2.0);
        t = r * r;
        w = ((p2 * t + p1) * t + p0) / ((q2 * t + q1) * t + 1.0);
        return 2.0 * t * (1.0 / (1.0 - r) - r * w) + w1;
    };
    Toms708.sign = function (a1, a2) {
        return a2 >= 0 ? Math.abs(a1) : -Math.abs(a1);
    };
    Toms708.spmpar = function (i) {
        var emin = 0;
        var emax = 0;
        var binv = 0.0;
        var bm1 = 0.0;
        var ibeta = 0;
        var b = 0.0;
        var m = 0;
        var one = 0.0;
        var w = 0.0;
        var z = 0.0;
        if (i > 1) {
            if (i > 2) {
                ibeta = Toms708.ipmpar(4);
                m = Toms708.ipmpar(5);
                emax = Toms708.ipmpar(7);
                b = ibeta;
                bm1 = ibeta - 1;
                one = 1.0;
                z = Math.pow(b, m - 1);
                w = ((z - one) * b + bm1) / (b * z);
                z = Math.pow(b, emax - 2);
                return w * z * b * b;
            }
            else {
                b = Toms708.ipmpar(4);
                emin = Toms708.ipmpar(6);
                one = 1.0;
                binv = one / b;
                w = Math.pow(b, emin + 2);
                return w * binv * binv * binv;
            }
        }
        b = Toms708.ipmpar(4);
        m = Toms708.ipmpar(5);
        return Math.pow(b, 1 - m);
    };
    return Toms708;
}());
exports.Toms708 = Toms708;
//# sourceMappingURL=toms708.js.map