"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var do_del_1 = require("./do_del");
var log = Math.log, fabs = Math.abs;
var _general_1 = require("../common/_general");
var DBL_EPSILON = Number.EPSILON, DBL_MIN = Number.MIN_VALUE;
function pnorm_both(x, cum, ccum, i_tail, log_p) {
    var a = [
        2.2352520354606839287,
        161.02823106855587881,
        1067.6894854603709582,
        18154.981253343561249,
        0.065682337918207449113
    ];
    var b = [
        47.20258190468824187,
        976.09855173777669322,
        10260.932208618978205,
        45507.789335026729956
    ];
    var c = [
        0.39894151208813466764,
        8.8831497943883759412,
        93.506656132177855979,
        597.27027639480026226,
        2494.5375852903726711,
        6848.1904505362823326,
        11602.651437647350124,
        9842.7148383839780218,
        1.0765576773720192317e-8
    ];
    var d = [
        22.266688044328115691,
        235.38790178262499861,
        1519.377599407554805,
        6485.558298266760755,
        18615.571640885098091,
        34900.952721145977266,
        38912.003286093271411,
        19685.429676859990727
    ];
    var p = [
        0.21589853405795699,
        0.1274011611602473639,
        0.022235277870649807,
        0.001421619193227893466,
        2.9112874951168792e-5,
        0.02307344176494017303
    ];
    var q = [
        1.28426009614491121,
        0.468238212480865118,
        0.0659881378689285515,
        0.00378239633202758244,
        7.29751555083966205e-5
    ];
    var xden;
    var xnum;
    var temp;
    var eps;
    var xsq;
    var y;
    var min = DBL_MIN;
    var lower;
    var upper;
    eps = DBL_EPSILON * 0.5;
    lower = i_tail !== true;
    upper = i_tail !== false;
    y = fabs(x);
    if (y <= 0.67448975) {
        if (y > eps) {
            xsq = x * x;
            xnum = a[4] * xsq;
            xden = xsq;
            for (var i = 0; i < 3; ++i) {
                xnum = (xnum + a[i]) * xsq;
                xden = (xden + b[i]) * xsq;
            }
        }
        else
            xnum = xden = 0.0;
        temp = x * (xnum + a[3]) / (xden + b[3]);
        if (lower)
            cum.val = 0.5 + temp;
        if (upper)
            ccum.val = 0.5 - temp;
        if (log_p) {
            if (lower)
                cum.val = log(cum.val);
            if (upper)
                ccum.val = log(ccum.val);
        }
    }
    else if (y <= _general_1.M_SQRT_32) {
        xnum = c[8] * y;
        xden = y;
        for (var i = 0; i < 7; ++i) {
            xnum = (xnum + c[i]) * y;
            xden = (xden + d[i]) * y;
        }
        temp = (xnum + c[7]) / (xden + d[7]);
        do_del_1.do_del(ccum, cum, log_p, y, temp, upper, lower, x);
        if (x > 0) {
            temp = cum.val;
            if (lower) {
                cum.val = ccum.val;
            }
            ccum.val = temp;
        }
    }
    else if ((log_p && y < 1e170) ||
        (lower && -37.5193 < x && x < 8.2924) ||
        (upper && -8.2924 < x && x < 37.5193)) {
        xsq = 1.0 / (x * x);
        xnum = p[5] * xsq;
        xden = xsq;
        for (var i = 0; i < 4; ++i) {
            xnum = (xnum + p[i]) * xsq;
            xden = (xden + q[i]) * xsq;
        }
        temp = xsq * (xnum + p[4]) / (xden + q[4]);
        temp = (_general_1.M_1_SQRT_2PI - temp) / y;
        do_del_1.do_del(ccum, cum, log_p, x, temp, upper, lower, x);
        if (x > 0) {
            temp = cum.val;
            if (lower) {
                cum.val = ccum.val;
            }
            ccum.val = temp;
        }
    }
    else {
        if (x > 0) {
            cum.val = _general_1.R_D__1(log_p);
            ccum.val = _general_1.R_D__0(log_p);
        }
        else {
            cum.val = _general_1.R_D__0(log_p);
            ccum.val = _general_1.R_D__1(log_p);
        }
    }
    if (log_p) {
        if (cum.val > -min)
            cum.val = -0;
        if (ccum.val > -min) {
            ccum.val = -0;
        }
    }
    else {
        if (cum.val < min)
            cum.val = 0;
        if (ccum.val < min)
            ccum.val = 0;
    }
    return;
}
exports.pnorm_both = pnorm_both;
//# sourceMappingURL=pnorm_both.js.map