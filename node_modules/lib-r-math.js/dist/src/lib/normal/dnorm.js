"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var _general_1 = require("../common/_general");
var ISNAN = Number.isNaN, R_FINITE = Number.isFinite, DBL_MAX = Number.MAX_VALUE, ML_POSINF = Number.POSITIVE_INFINITY, ML_NAN = Number.NaN;
var sqrt = Math.sqrt, exp = Math.exp, fabs = Math.abs, R_forceint = Math.round, log = Math.log;
var printer = debug('dnorm4');
function dnorm4(x, mu, sigma, give_log) {
    if (mu === void 0) { mu = 0; }
    if (sigma === void 0) { sigma = 1; }
    if (give_log === void 0) { give_log = false; }
    if (ISNAN(x) || ISNAN(mu) || ISNAN(sigma)) {
        return x + mu + sigma;
    }
    if (!R_FINITE(sigma)) {
        return _general_1.R_D__0(give_log);
    }
    if (!R_FINITE(x) && mu === x) {
        return ML_NAN;
    }
    if (sigma <= 0) {
        if (sigma < 0) {
            return _general_1.ML_ERR_return_NAN(printer);
        }
        return x === mu ? ML_POSINF : _general_1.R_D__0(give_log);
    }
    x = (x - mu) / sigma;
    if (!R_FINITE(x))
        return _general_1.R_D__0(give_log);
    x = fabs(x);
    if (x >= 2 * sqrt(DBL_MAX))
        return _general_1.R_D__0(give_log);
    if (give_log) {
        return -(_general_1.M_LN_SQRT_2PI + 0.5 * x * x + log(sigma));
    }
    if (x < 5)
        return _general_1.M_1_SQRT_2PI * exp(-0.5 * x * x) / sigma;
    if (x > sqrt(-2 * _general_1.M_LN2 * (_general_1.DBL_MIN_EXP + 1 - _general_1.DBL_MANT_DIG))) {
        return 0;
    }
    var x1 = _general_1.ldexp(R_forceint(_general_1.ldexp(x, 16)), -16);
    var x2 = x - x1;
    return (_general_1.M_1_SQRT_2PI / sigma * (exp(-0.5 * x1 * x1) * exp((-0.5 * x2 - x1) * x2)));
}
exports.dnorm4 = dnorm4;
//# sourceMappingURL=dnorm.js.map