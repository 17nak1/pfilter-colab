"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rchisq_1 = require("../chi-2/rchisq");
var rnchisq_1 = require("../chi-2/rnchisq");
var r_func_1 = require("../r-func");
var normal_1 = require("../rng/normal");
var df_1 = require("./df");
var dnf_1 = require("./dnf");
var pf_1 = require("./pf");
var pnf_1 = require("./pnf");
var qf_1 = require("./qf");
var qnf_1 = require("./qnf");
var rf_1 = require("./rf");
function FDist(rng) {
    if (rng === void 0) { rng = new normal_1.Inversion(); }
    function df(x, df1, df2, ncp, log) {
        if (log === void 0) { log = false; }
        if (ncp === undefined) {
            return df_1.df(x, df1, df2, log);
        }
        return dnf_1.dnf(x, df1, df2, ncp, log);
    }
    function pf(q, df1, df2, ncp, lowerTail, logP) {
        if (lowerTail === void 0) { lowerTail = true; }
        if (logP === void 0) { logP = false; }
        if (ncp === undefined) {
            return pf_1.pf(q, df1, df2, lowerTail, logP);
        }
        return pnf_1.pnf(q, df1, df2, ncp, lowerTail, logP);
    }
    function qf(p, df1, df2, ncp, lowerTail, logP) {
        if (lowerTail === void 0) { lowerTail = true; }
        if (logP === void 0) { logP = false; }
        if (ncp === undefined) {
            return qf_1.qf(p, df1, df2, lowerTail, logP);
        }
        return qnf_1.qnf(p, df1, df2, ncp, lowerTail, logP);
    }
    function rf(n, n1, n2, rng) {
        return r_func_1.randomGenHelper(n, rfOne, n1, n2, rng);
    }
    function rfOne(df1, df2, ncp) {
        if (ncp === undefined) {
            return rf_1.rfOne(df1, df2, rng);
        }
        if (Number.isNaN(ncp)) {
            return NaN;
        }
        var numerator = rnchisq_1.rnchisqOne(df1, ncp, rng) / df1;
        var denominator = rchisq_1.rchisqOne(df2, rng) / df2;
        return numerator / denominator;
    }
    return {
        df: df,
        pf: pf,
        qf: qf,
        rf: rf
    };
}
exports.FDist = FDist;
//# sourceMappingURL=index.js.map