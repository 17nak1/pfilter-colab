"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var _general_1 = require("../common/_general");
var pnbeta_1 = require("../beta/pnbeta");
var pnchisq_1 = require("../chi-2/pnchisq");
var ISNAN = Number.isNaN, R_FINITE = Number.isFinite, ML_POSINF = Number.POSITIVE_INFINITY;
var printer_pnf = debug('pnf');
function pnf(x, df1, df2, ncp, lowerTail, logP) {
    if (lowerTail === void 0) { lowerTail = true; }
    if (logP === void 0) { logP = false; }
    var y;
    if (ISNAN(x) || ISNAN(df1) || ISNAN(df2) || ISNAN(ncp))
        return x + df2 + df1 + ncp;
    if (df1 <= 0 || df2 <= 0 || ncp < 0)
        return _general_1.ML_ERR_return_NAN(printer_pnf);
    if (!R_FINITE(ncp))
        return _general_1.ML_ERR_return_NAN(printer_pnf);
    if (!R_FINITE(df1) && !R_FINITE(df2))
        return _general_1.ML_ERR_return_NAN(printer_pnf);
    var rc = _general_1.R_P_bounds_01(lowerTail, logP, x, 0, ML_POSINF);
    if (rc !== undefined) {
        return rc;
    }
    if (df2 > 1e8)
        return pnchisq_1.pnchisq(x * df1, df1, ncp, lowerTail, logP);
    y = df1 / df2 * x;
    return pnbeta_1.pnbeta2(y / (1 + y), 1 / (1 + y), df1 / 2, df2 / 2, ncp, lowerTail, logP);
}
exports.pnf = pnf;
//# sourceMappingURL=pnf.js.map