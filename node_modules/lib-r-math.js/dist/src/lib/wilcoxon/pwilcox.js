'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var _general_1 = require("../common/_general");
var choose_1 = require("../common/choose");
var WilcoxonCache_1 = require("./WilcoxonCache");
var cwilcox_1 = require("./cwilcox");
var R_forceint = Math.round, floor = Math.floor;
var ISNAN = Number.isNaN, R_FINITE = Number.isFinite;
var printer_pwilcox = debug('pwilcox');
function pwilcox(q, m, n, lowerTail, logP) {
    if (lowerTail === void 0) { lowerTail = true; }
    if (logP === void 0) { logP = false; }
    m = R_forceint(m);
    n = R_forceint(n);
    var w = new WilcoxonCache_1.WilcoxonCache();
    var lower_tail = lowerTail;
    if (ISNAN(q) || ISNAN(m) || ISNAN(n))
        return q + m + n;
    if (!R_FINITE(m) || !R_FINITE(n))
        return _general_1.ML_ERR_return_NAN(printer_pwilcox);
    if (m <= 0 || n <= 0)
        return _general_1.ML_ERR_return_NAN(printer_pwilcox);
    q = floor(q + 1e-7);
    if (q < 0.0)
        return _general_1.R_DT_0(lower_tail, logP);
    if (q >= m * n)
        return _general_1.R_DT_1(lower_tail, logP);
    var c = choose_1.internal_choose(m + n, n);
    var p = 0;
    if (q <= m * n / 2) {
        for (var i = 0; i <= q; i++)
            p += cwilcox_1.cwilcox(i, m, n, w) / c;
    }
    else {
        q = m * n - q;
        for (var i = 0; i < q; i++)
            p += cwilcox_1.cwilcox(i, m, n, w) / c;
        lower_tail = !lower_tail;
    }
    return _general_1.R_DT_val(lower_tail, logP, p);
}
exports.pwilcox = pwilcox;
//# sourceMappingURL=pwilcox.js.map