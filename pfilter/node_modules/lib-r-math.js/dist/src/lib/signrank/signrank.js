'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var _general_1 = require("../common/_general");
var expm1_1 = require("../exp/expm1");
var r_func_1 = require("../r-func");
var R_FINITE = Number.isFinite, DBL_EPSILON = Number.EPSILON, ISNAN = Number.isNaN;
var M_LN2 = Math.LN2, fabs = Math.abs, trunc = Math.trunc, log = Math.log, exp = Math.exp, floor = Math.floor, round = Math.round;
var printer_dsignrank = debug('dsignrank');
var printer_psignrank = debug('psignrank');
var printer_qsignrank = debug('qsignrank');
var printer_rsignrank = debug('rsignrank');
function csignrank(k, n, u, c, w) {
    if (k < 0 || k > u)
        return 0;
    if (k > c)
        k = u - k;
    if (n === 1)
        return 1;
    if (w[0] === 1)
        return w[k];
    w[0] = w[1] = 1;
    for (var j = 2; j < n + 1; ++j) {
        var i = void 0;
        var end = _general_1.imin2(j * (j + 1) / 2, c);
        for (i = end; i >= j; --i)
            w[i] += w[i - j];
    }
    return w[k];
}
exports.csignrank = csignrank;
function dsignrank(x, n, logX) {
    if (logX === void 0) { logX = false; }
    var rn = round(n);
    var u = rn * (rn + 1) / 2;
    var c = trunc(u / 2);
    var w = Array.from({ length: c + 1 }).fill(0);
    if (ISNAN(x) || ISNAN(n))
        return x + n;
    if (n <= 0) {
        return _general_1.ML_ERR_return_NAN(printer_dsignrank);
    }
    if (fabs(x - round(x)) > 1e-7) {
        return _general_1.R_D__0(logX);
    }
    x = round(x);
    if (x < 0 || x > n * (n + 1) / 2) {
        return _general_1.R_D__0(logX);
    }
    var d = _general_1.R_D_exp(logX, log(csignrank(trunc(x), n, u, c, w)) - n * M_LN2);
    return d;
}
exports.dsignrank = dsignrank;
function psignrank(x, n, lowerTail, logP) {
    if (lowerTail === void 0) { lowerTail = true; }
    if (logP === void 0) { logP = false; }
    var roundN = round(n);
    var u = roundN * (roundN + 1) / 2;
    var c = trunc(u / 2);
    var w = Array.from({ length: c + 1 }).fill(0);
    (function (x) { return round(x + 1e-7); });
    if (ISNAN(x) || ISNAN(n))
        return x + n;
    if (!R_FINITE(n))
        return _general_1.ML_ERR_return_NAN(printer_psignrank);
    if (n <= 0)
        return _general_1.ML_ERR_return_NAN(printer_psignrank);
    if (x < 0.0) {
        return _general_1.R_DT_0(lowerTail, logP);
    }
    if (x >= u) {
        return _general_1.R_DT_1(lowerTail, logP);
    }
    var f = exp(-roundN * M_LN2);
    var p = 0;
    if (x <= u / 2) {
        for (var i = 0; i <= x; i++) {
            p += csignrank(i, roundN, u, c, w) * f;
        }
    }
    else {
        x = n * (n + 1) / 2 - x;
        for (var i = 0; i < x; i++) {
            p += csignrank(i, roundN, u, c, w) * f;
        }
        lowerTail = !lowerTail;
    }
    return _general_1.R_DT_val(lowerTail, logP, p);
}
exports.psignrank = psignrank;
function qsignrank(x, n, lowerTail, logP) {
    if (lowerTail === void 0) { lowerTail = true; }
    if (logP === void 0) { logP = false; }
    var roundN = round(n);
    var u = roundN * (roundN + 1) / 2;
    var c = trunc(u / 2);
    var w = Array.from({ length: c + 1 }).fill(0);
    if (ISNAN(x) || ISNAN(n)) {
        return x + n;
    }
    if (!R_FINITE(x) || !R_FINITE(n)) {
        return _general_1.ML_ERR_return_NAN(printer_qsignrank);
    }
    var rc = _general_1.R_Q_P01_check(logP, x);
    if (rc !== undefined) {
        return rc;
    }
    if (roundN <= 0) {
        return _general_1.ML_ERR_return_NAN(printer_qsignrank);
    }
    if (x === _general_1.R_DT_0(lowerTail, logP)) {
        return 0;
    }
    if (x === _general_1.R_DT_1(lowerTail, logP)) {
        return u;
    }
    if (logP || !lowerTail)
        x = expm1_1.R_DT_qIv(lowerTail, logP, x);
    var f = exp(-n * M_LN2);
    var p = 0;
    var q = 0;
    if (x <= 0.5) {
        x = x - 10 * DBL_EPSILON;
        while (true) {
            p += csignrank(q, roundN, u, c, w) * f;
            if (p >= x)
                break;
            q++;
        }
    }
    else {
        x = 1 - x + 10 * DBL_EPSILON;
        while (true) {
            p += csignrank(q, roundN, u, c, w) * f;
            if (p > x) {
                q = trunc(u - q);
                break;
            }
            q++;
        }
    }
    return q;
}
exports.qsignrank = qsignrank;
function rsignrankOne(n, rng) {
    if (ISNAN(n))
        return n;
    var nRound = round(n);
    if (nRound < 0)
        return _general_1.ML_ERR_return_NAN(printer_rsignrank);
    if (nRound === 0)
        return 0;
    var r = 0.0;
    var k = floor(nRound);
    for (var i = 0; i < k;) {
        r += ++i * floor(rng.unif_rand() + 0.5);
    }
    return r;
}
exports.rsignrankOne = rsignrankOne;
function rsignrank(N, n, rng) {
    return r_func_1.randomGenHelper(N, rsignrankOne, n, rng);
}
exports.rsignrank = rsignrank;
//# sourceMappingURL=signrank.js.map