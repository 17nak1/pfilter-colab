'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var lbeta_1 = require("../beta/lbeta");
var pbeta_1 = require("../beta/pbeta");
var _general_1 = require("../common/_general");
var pnorm_1 = require("../normal/pnorm");
var log1p = Math.log1p, sqrt = Math.sqrt, log = Math.log, fabs = Math.abs, exp = Math.exp;
var ISNAN = Number.isNaN, R_FINITE = Number.isFinite;
var printer = debug('pt');
function pt(x, n, lowerTail, log_p) {
    if (lowerTail === void 0) { lowerTail = true; }
    if (log_p === void 0) { log_p = false; }
    var val;
    var nx;
    var lower_tail = lowerTail;
    if (ISNAN(x) || ISNAN(n))
        return x + n;
    if (n <= 0.0) {
        return _general_1.ML_ERR_return_NAN(printer);
    }
    if (!R_FINITE(x)) {
        return x < 0 ? _general_1.R_DT_0(lower_tail, log_p) : _general_1.R_DT_1(lower_tail, log_p);
    }
    if (!R_FINITE(n)) {
        return pnorm_1.pnorm5(x, 0.0, 1.0, lower_tail, log_p);
    }
    if (n > 4e5) {
        val = 1 / (4 * n);
        return pnorm_1.pnorm5(x * (1 - val) / sqrt(1 + x * x * 2 * val), 0.0, 1.0, lower_tail, log_p);
    }
    nx = 1 + x / n * x;
    if (nx > 1e100) {
        var lval = void 0;
        lval =
            -0.5 * n * (2 * log(fabs(x)) - log(n)) -
                lbeta_1.lbeta(0.5 * n, 0.5) -
                log(0.5 * n);
        val = log_p ? lval : exp(lval);
    }
    else {
        val =
            n > x * x
                ? pbeta_1.pbeta(x * x / (n + x * x), 0.5, n / 2, false, log_p)
                : pbeta_1.pbeta(1 / nx, n / 2, 0.5, true, log_p);
    }
    if (x <= 0) {
        lower_tail = !lower_tail;
    }
    if (log_p) {
        if (lower_tail) {
            return log1p(-0.5 * exp(val));
        }
        else {
            return val - _general_1.M_LN2;
        }
    }
    else {
        val /= 2;
        return _general_1.R_D_Cval(lower_tail, val);
    }
}
exports.pt = pt;
//# sourceMappingURL=pt.js.map