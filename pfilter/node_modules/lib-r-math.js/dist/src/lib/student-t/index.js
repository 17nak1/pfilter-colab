'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var rchisq_1 = require("../chi-2/rchisq");
var rnorm_1 = require("../normal/rnorm");
var inversion_1 = require("../rng/normal/inversion");
var dnt_1 = require("./dnt");
var dt_1 = require("./dt");
var pnt_1 = require("./pnt");
var pt_1 = require("./pt");
var qnt_1 = require("./qnt");
var qt_1 = require("./qt");
var rt_1 = require("./rt");
function StudentT(rng) {
    if (rng === void 0) { rng = new inversion_1.Inversion(); }
    function dt(x, df, ncp, asLog) {
        if (asLog === void 0) { asLog = false; }
        if (ncp === undefined) {
            return dt_1.dt(x, df, asLog);
        }
        return dnt_1.dnt(x, df, ncp, asLog);
    }
    function pt(q, df, ncp, lowerTail, logP) {
        if (lowerTail === void 0) { lowerTail = true; }
        if (logP === void 0) { logP = false; }
        if (ncp === undefined) {
            return pt_1.pt(q, df, lowerTail, logP);
        }
        return pnt_1.pnt(q, df, ncp, lowerTail, logP);
    }
    function qt(p, df, ncp, lowerTail, logP) {
        if (lowerTail === void 0) { lowerTail = true; }
        if (logP === void 0) { logP = false; }
        if (ncp === undefined) {
            return qt_1.qt(p, df, lowerTail, logP);
        }
        return qnt_1.qnt(p, df, ncp, lowerTail, logP);
    }
    function rt(n, df, ncp) {
        if (ncp === undefined) {
            return rt_1.rt(n, df, rng);
        }
        else if (Number.isNaN(ncp)) {
            return Array.from({ length: n }).fill(NaN);
        }
        else {
            var norm = rnorm_1.rnorm(n, ncp, 1, rng);
            var chisq_1 = rchisq_1.rchisq(n, df, rng).map(function (v) { return v / df; }).map(Math.sqrt);
            var result = norm.map(function (n, i) { return n / chisq_1[i]; });
            return result;
        }
    }
    return {
        dt: dt,
        pt: pt,
        qt: qt,
        rt: rt
    };
}
exports.StudentT = StudentT;
//# sourceMappingURL=index.js.map