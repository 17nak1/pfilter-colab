'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var _general_1 = require("../common/_general");
var pnorm_1 = require("../normal/pnorm");
var exp = Math.exp, pow = Math.pow;
var bb = 8;
var C2 = -50;
var wlar = 3;
var wincr1 = 2;
var wincr2 = 3;
var nleg = 12;
var ihalf = 6;
var xleg = [
    0.981560634246719250690549090149,
    0.904117256370474856678465866119,
    0.769902674194304687036893833213,
    0.587317954286617447296702418941,
    0.367831498998180193752691536644,
    0.125233408511468915472441369464
];
var aleg = [
    0.047175336386511827194615961485,
    0.106939325995318430960254718194,
    0.160078328543346226334652529543,
    0.20316742672306592174906445581,
    0.233492536538354808760849898925,
    0.249147045813402785000562436043
];
var C3 = 60;
var C1 = -30;
function wprob(w, rr, cc) {
    var a;
    var ac;
    var pr_w;
    var b;
    var binc;
    var c;
    var cc1;
    var pminus;
    var pplus;
    var qexpo;
    var qsqz;
    var rinsum;
    var wi;
    var wincr;
    var xx;
    var blb;
    var bub;
    var einsum;
    var elsum;
    var j;
    qsqz = w * 0.5;
    if (qsqz >= bb) {
        return 1.0;
    }
    pr_w =
        2 * pnorm_1.pnorm5(qsqz, 0, 1, true, false) - 1;
    if (pr_w >= exp(C2 / cc))
        pr_w = pow(pr_w, cc);
    else
        pr_w = 0.0;
    if (w > wlar)
        wincr = wincr1;
    else
        wincr = wincr2;
    blb = qsqz;
    binc = (bb - qsqz) / wincr;
    bub = blb + binc;
    einsum = 0.0;
    cc1 = cc - 1.0;
    for (wi = 1; wi <= wincr; wi++) {
        elsum = 0.0;
        a = 0.5 * (bub + blb);
        b = 0.5 * (bub - blb);
        for (var jj = 1; jj <= nleg; jj++) {
            if (ihalf < jj) {
                j = nleg - jj + 1;
                xx = xleg[j - 1];
            }
            else {
                j = jj;
                xx = -xleg[j - 1];
            }
            c = b * xx;
            ac = a + c;
            qexpo = ac * ac;
            if (qexpo > C3)
                break;
            pplus = 2 * pnorm_1.pnorm5(ac, 0, 1, true, false);
            pminus = 2 * pnorm_1.pnorm5(ac, w, 1, true, false);
            rinsum = pplus * 0.5 - pminus * 0.5;
            if (rinsum >= exp(C1 / cc1)) {
                rinsum = aleg[j - 1] * exp(-(0.5 * qexpo)) * pow(rinsum, cc1);
                elsum += rinsum;
            }
        }
        elsum *= 2.0 * b * cc * _general_1.M_1_SQRT_2PI;
        einsum += elsum;
        blb = bub;
        bub += binc;
    }
    pr_w += einsum;
    if (pr_w <= exp(C1 / rr))
        return 0;
    pr_w = pow(pr_w, rr);
    if (pr_w >= 1)
        return 1;
    return pr_w;
}
exports.wprob = wprob;
//# sourceMappingURL=wprob.js.map