"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var _general_1 = require("../common/_general");
var r_func_1 = require("../r-func");
var qbinom_1 = require("./qbinom");
var log = Math.log, fabs = Math.abs, abs = Math.abs, sqrt = Math.sqrt, fmin2 = Math.min, trunc = Math.trunc, round = Math.round;
var INT_MAX = Number.MAX_SAFE_INTEGER, R_FINITE = Number.isFinite;
var printer_rbinom = debug('_rbinom');
function rbinom(n, nin, pp, rng) {
    return r_func_1.randomGenHelper(n, rbinomOne, nin, pp, rng);
}
exports.rbinom = rbinom;
function rbinomOne(nin, pp, rng) {
    var c = 0;
    var fm = 0;
    var npq = 0;
    var p1 = 0;
    var p2 = 0;
    var p3 = 0;
    var p4 = 0;
    var qn = 0;
    var xl = 0;
    var xll = 0;
    var xlr = 0;
    var xm = 0;
    var xr = 0;
    var psave = -1.0;
    var nsave = -1;
    var m = 0;
    var f;
    var f1;
    var f2;
    var u;
    var v;
    var w;
    var w2;
    var x;
    var x1;
    var x2;
    var z;
    var z2;
    var p;
    var q;
    var np;
    var g;
    var r;
    var al;
    var alv;
    var amaxp;
    var ffm;
    var ynorm;
    var i;
    var ix = 0;
    var k;
    var n;
    if (!R_FINITE(nin))
        return _general_1.ML_ERR_return_NAN(printer_rbinom);
    r = round(nin);
    if (r !== nin)
        return _general_1.ML_ERR_return_NAN(printer_rbinom);
    if (!R_FINITE(pp) ||
        r < 0 ||
        pp < 0 ||
        pp > 1) {
        return _general_1.ML_ERR_return_NAN(printer_rbinom);
    }
    if (r === 0 || pp === 0)
        return 0;
    if (pp === 1)
        return r;
    if (r >= INT_MAX) {
        printer_rbinom('Evade overflow:%d > MAX_SAFE_INTEGER', r);
        return qbinom_1.qbinom(rng.unif_rand(), r, pp, false, false);
    }
    n = trunc(r);
    p = fmin2(pp, 1 - pp);
    q = 1 - p;
    np = n * p;
    r = p / q;
    g = r * (n + 1);
    var gotoL_np_small = false;
    if (pp !== psave || n !== nsave) {
        psave = pp;
        nsave = n;
        if (np < 30.0) {
            qn = _general_1.R_pow_di(q, n);
            gotoL_np_small = true;
        }
        else {
            ffm = np + p;
            m = trunc(ffm);
            fm = m;
            npq = np * q;
            p1 = trunc(2.195 * sqrt(npq) - 4.6 * q) + 0.5;
            xm = fm + 0.5;
            xl = xm - p1;
            xr = xm + p1;
            c = 0.134 + 20.5 / (15.3 + fm);
            al = (ffm - xl) / (ffm - xl * p);
            xll = al * (1.0 + 0.5 * al);
            al = (xr - ffm) / (xr * q);
            xlr = al * (1.0 + 0.5 * al);
            p2 = p1 * (1.0 + c + c);
            p3 = p2 + c / xll;
            p4 = p3 + c / xlr;
        }
    }
    else if (n === nsave) {
        if (np < 30.0)
            gotoL_np_small = true;
    }
    var gotoFinis = false;
    while (true && !gotoL_np_small) {
        u = rng.unif_rand() * p4;
        v = rng.unif_rand();
        if (u <= p1) {
            ix = trunc(xm - p1 * v + u);
            gotoFinis = true;
            break;
        }
        if (u <= p2) {
            x = xl + (u - p1) / c;
            v = v * c + 1.0 - fabs(xm - x) / p1;
            if (v > 1.0 || v <= 0)
                continue;
            ix = trunc(x);
        }
        else {
            if (u > p3) {
                ix = trunc(xr - log(v) / xlr);
                if (ix > n)
                    continue;
                v = v * (u - p3) * xlr;
            }
            else {
                ix = trunc(xl + log(v) / xll);
                if (ix < 0)
                    continue;
                v = v * (u - p2) * xll;
            }
        }
        k = abs(ix - m);
        if (k <= 20 || k >= npq / 2 - 1) {
            f = 1.0;
            if (m < ix) {
                for (i = m + 1; i <= ix; i++)
                    f *= g / i - r;
            }
            else if (m !== ix) {
                for (i = ix + 1; i <= m; i++)
                    f /= g / i - r;
            }
            if (v <= f) {
                gotoFinis = true;
                break;
            }
        }
        else {
            amaxp = k / npq * ((k * (k / 3 + 0.625) + 0.1666666666666) / npq + 0.5);
            ynorm = -k * k / (2.0 * npq);
            alv = log(v);
            if (alv < ynorm - amaxp) {
                gotoFinis = true;
                break;
            }
            if (alv <= ynorm + amaxp) {
                x1 = ix + 1;
                f1 = fm + 1.0;
                z = n + 1 - fm;
                w = n - ix + 1.0;
                z2 = z * z;
                x2 = x1 * x1;
                f2 = f1 * f1;
                w2 = w * w;
                if (alv <=
                    xm * log(f1 / x1) +
                        (n - m + 0.5) * log(z / w) +
                        (ix - m) * log(w * p / (x1 * q)) +
                        (13860.0 - (462.0 - (132.0 - (99.0 - 140.0 / f2) / f2) / f2) / f2) /
                            f1 /
                            166320.0 +
                        (13860.0 - (462.0 - (132.0 - (99.0 - 140.0 / z2) / z2) / z2) / z2) /
                            z /
                            166320.0 +
                        (13860.0 - (462.0 - (132.0 - (99.0 - 140.0 / x2) / x2) / x2) / x2) /
                            x1 /
                            166320.0 +
                        (13860.0 - (462.0 - (132.0 - (99.0 - 140.0 / w2) / w2) / w2) / w2) /
                            w /
                            166320) {
                    gotoFinis = true;
                    break;
                }
            }
        }
    }
    if (!gotoFinis) {
        while (true) {
            ix = 0;
            f = qn;
            u = rng.unif_rand();
            while (true) {
                if (u < f) {
                    gotoFinis = true;
                    break;
                }
                if (ix > 110)
                    break;
                u -= f;
                ix++;
                f *= g / ix - r;
            }
            if (gotoFinis) {
                break;
            }
        }
    }
    if (psave > 0.5) {
        ix = n - ix;
    }
    return ix;
}
exports.rbinomOne = rbinomOne;
//# sourceMappingURL=rbinom.js.map