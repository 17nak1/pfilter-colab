'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var _general_1 = require("../common/_general");
var expm1_1 = require("../exp/expm1");
var printer = debug('qnorm');
var ISNAN = Number.isNaN;
var log = Math.log, sqrt = Math.sqrt, fabs = Math.abs;
var ML_NEGINF = -Infinity;
var ML_POSINF = Infinity;
function qnorm(p, mu, sigma, lower_tail, log_p) {
    if (mu === void 0) { mu = 0; }
    if (sigma === void 0) { sigma = 1; }
    if (lower_tail === void 0) { lower_tail = true; }
    if (log_p === void 0) { log_p = false; }
    var q;
    var p_;
    var r;
    var val;
    if (ISNAN(p) || ISNAN(mu) || ISNAN(sigma))
        return p + mu + sigma;
    var rc = _general_1.R_Q_P01_boundaries(lower_tail, log_p, p, ML_NEGINF, ML_POSINF);
    if (rc !== undefined) {
        return rc;
    }
    if (sigma < 0)
        return _general_1.ML_ERR_return_NAN(printer);
    if (sigma === 0)
        return mu;
    p_ = expm1_1.R_DT_qIv(lower_tail, log_p, p);
    q = p_ - 0.5;
    printer('qnorm(p=%d, m=%d, s=%d, l.t.= %s, log= %s): q = %d', p, mu, sigma, lower_tail, log_p, q);
    if (fabs(q) <= 0.425) {
        r = 0.180625 - q * q;
        val =
            q *
                (((((((r * 2509.0809287301226727 + 33430.575583588128105) * r +
                    67265.770927008700853) *
                    r +
                    45921.953931549871457) *
                    r +
                    13731.693765509461125) *
                    r +
                    1971.5909503065514427) *
                    r +
                    133.14166789178437745) *
                    r +
                    3.387132872796366608) /
                (((((((r * 5226.495278852854561 + 28729.085735721942674) * r +
                    39307.89580009271061) *
                    r +
                    21213.794301586595867) *
                    r +
                    5394.1960214247511077) *
                    r +
                    687.1870074920579083) *
                    r +
                    42.313330701600911252) *
                    r +
                    1);
    }
    else {
        if (q > 0)
            r = expm1_1.R_DT_CIv(lower_tail, log_p, p);
        else
            r = p_;
        r = sqrt(-(log_p && ((lower_tail && q <= 0) || (!lower_tail && q > 0))
            ? p
            : log(r)));
        printer('close to 0 or 1: r = %7d', r);
        if (r <= 5) {
            r += -1.6;
            val =
                (((((((r * 7.7454501427834140764e-4 + 0.0227238449892691845833) * r +
                    0.24178072517745061177) *
                    r +
                    1.27045825245236838258) *
                    r +
                    3.64784832476320460504) *
                    r +
                    5.7694972214606914055) *
                    r +
                    4.6303378461565452959) *
                    r +
                    1.42343711074968357734) /
                    (((((((r * 1.05075007164441684324e-9 + 5.475938084995344946e-4) * r +
                        0.0151986665636164571966) *
                        r +
                        0.14810397642748007459) *
                        r +
                        0.68976733498510000455) *
                        r +
                        1.6763848301838038494) *
                        r +
                        2.05319162663775882187) *
                        r +
                        1);
        }
        else {
            r += -5;
            val =
                (((((((r * 2.01033439929228813265e-7 + 2.71155556874348757815e-5) *
                    r +
                    0.0012426609473880784386) *
                    r +
                    0.026532189526576123093) *
                    r +
                    0.29656057182850489123) *
                    r +
                    1.7848265399172913358) *
                    r +
                    5.4637849111641143699) *
                    r +
                    6.6579046435011037772) /
                    (((((((r * 2.04426310338993978564e-15 + 1.4215117583164458887e-7) *
                        r +
                        1.8463183175100546818e-5) *
                        r +
                        7.868691311456132591e-4) *
                        r +
                        0.0148753612908506148525) *
                        r +
                        0.13692988092273580531) *
                        r +
                        0.59983220655588793769) *
                        r +
                        1);
        }
        if (q < 0.0)
            val = -val;
    }
    return mu + sigma * val;
}
exports.qnorm = qnorm;
//# sourceMappingURL=qnorm.js.map