'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var N = 624;
var M = 397;
var MATRIX_A = 0x9908b0df;
var UPPER_MASK = 0x80000000;
var LOWER_MASK = 0x7fffffff;
var TEMPERING_MASK_B = 0x9d2c5680;
var TEMPERING_MASK_C = 0xefc60000;
var fixup_1 = require("../fixup");
var irng_1 = require("../irng");
var irng_type_1 = require("../irng-type");
var timeseed_1 = require("../timeseed");
var SEED_LEN = 625;
var MersenneTwister = (function (_super) {
    __extends(MersenneTwister, _super);
    function MersenneTwister(_seed) {
        if (_seed === void 0) { _seed = timeseed_1.timeseed(); }
        return _super.call(this, _seed) || this;
    }
    MersenneTwister.prototype.MT_sgenrand = function (seed) {
        for (var i = 0; i < N; i++) {
            this.mt[i] = seed & 0xffff0000;
            seed = 69069 * seed + 1;
            this.mt[i] |= (seed & 0xffff0000) >>> 16;
            seed = 69069 * seed + 1;
        }
        this.mti = N;
    };
    MersenneTwister.prototype.MT_genrand = function () {
        var y = new Int32Array(1);
        var mag01 = new Int32Array([0x0, MATRIX_A]);
        var dummy = this.m_seed;
        this.mti = dummy[0];
        if (this.mti >= N) {
            var kk = void 0;
            if (this.mti === N + 1)
                this.MT_sgenrand(4357);
            for (kk = 0; kk < N - M; kk++) {
                y[0] = (this.mt[kk] & UPPER_MASK) | (this.mt[kk + 1] & LOWER_MASK);
                this.mt[kk] = this.mt[kk + M] ^ (y[0] >>> 1) ^ mag01[y[0] & 0x1];
            }
            for (; kk < N - 1; kk++) {
                y[0] = (this.mt[kk] & UPPER_MASK) | (this.mt[kk + 1] & LOWER_MASK);
                this.mt[kk] = this.mt[kk + (M - N)] ^ (y[0] >>> 1) ^ mag01[y[0] & 0x1];
            }
            y[0] = (this.mt[N - 1] & UPPER_MASK) | (this.mt[0] & LOWER_MASK);
            this.mt[N - 1] = this.mt[M - 1] ^ (y[0] >>> 1) ^ mag01[y[0] & 0x1];
            this.mti = 0;
        }
        y[0] = this.mt[this.mti++];
        y[0] ^= y[0] >>> 11;
        y[0] ^= (y[0] << 7) & TEMPERING_MASK_B;
        y[0] ^= (y[0] << 15) & TEMPERING_MASK_C;
        y[0] ^= y[0] >>> 18;
        dummy[0] = this.mti;
        return (new Uint32Array(y.buffer)[0] * 2.3283064365386963e-10);
    };
    MersenneTwister.prototype.fixupSeeds = function () {
        var s = this.m_seed;
        s[0] = 624;
        if (s[0] <= 0)
            s[0] = 624;
        if (this.mt.find(function (v) { return !!v; }) === undefined) {
            this.init(timeseed_1.timeseed());
        }
        return;
    };
    MersenneTwister.prototype._setup = function () {
        var buf = new ArrayBuffer(SEED_LEN * 4);
        this._kind = irng_type_1.IRNGType.MERSENNE_TWISTER;
        this._name = 'Mersenne-Twister';
        this.m_seed = new Int32Array(buf).fill(0);
        this.mt = new Int32Array(buf, 4);
        this.mti = N + 1;
    };
    MersenneTwister.prototype.init = function (_seed) {
        if (_seed === void 0) { _seed = timeseed_1.timeseed(); }
        var s = new Uint32Array([0]);
        s[0] = _seed;
        for (var j = 0; j < 50; j++) {
            s[0] = 69069 * s[0] + 1;
        }
        for (var j = 0; j < this.m_seed.length; j++) {
            s[0] = 69069 * s[0] + 1;
            this.m_seed[j] = s[0];
        }
        this.fixupSeeds();
        _super.prototype.init.call(this, _seed);
    };
    MersenneTwister.prototype.internal_unif_rand = function () {
        var rc = this.MT_genrand();
        return fixup_1.fixup(rc);
    };
    Object.defineProperty(MersenneTwister.prototype, "seed", {
        get: function () {
            return Array.from(this.m_seed);
        },
        set: function (_seed) {
            if (_seed.length > this.m_seed.length || _seed.length === 0) {
                this.init(timeseed_1.timeseed());
                return;
            }
            this.m_seed.set(_seed);
        },
        enumerable: true,
        configurable: true
    });
    return MersenneTwister;
}(irng_1.IRNG));
exports.MersenneTwister = MersenneTwister;
//# sourceMappingURL=index.js.map