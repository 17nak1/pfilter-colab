'use strict';
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var r_func_1 = require("../../r-func");
var trunc = Math.trunc;
function TAOCP1997init(seed) {
    var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e;
    var KK = 100;
    var LL = 37;
    var MM = 1073741824;
    var MMF = 1073741824 - 1;
    var KKK = 199;
    var KKL = 63;
    var ss = seed - seed % 2 + 2;
    var X = new Uint32Array(KKK);
    var arr = r_func_1.sequenceFactory(-1);
    try {
        for (var _f = __values(arr(1, KK)), _g = _f.next(); !_g.done; _g = _f.next()) {
            var j = _g.value;
            X[j] = ss;
            ss = ss + ss;
            if (ss >= MM)
                ss = ss - MM + 2;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
        }
        finally { if (e_1) throw e_1.error; }
    }
    X[1]++;
    ss = seed;
    var T = 69;
    while (T > 0) {
        try {
            for (var _h = __values(arr(KK, 2)), _j = _h.next(); !_j.done; _j = _h.next()) {
                var j = _j.value;
                X[j + j] = X[j];
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_j && !_j.done && (_b = _h.return)) _b.call(_h);
            }
            finally { if (e_2) throw e_2.error; }
        }
        try {
            for (var _k = __values(arr(KKK, KKL + 1, -2)), _l = _k.next(); !_l.done; _l = _k.next()) {
                var j = _l.value;
                X[KKK - j] = X[j] - X[j] % 2;
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_l && !_l.done && (_c = _k.return)) _c.call(_k);
            }
            finally { if (e_3) throw e_3.error; }
        }
        try {
            for (var _m = __values(arr(KKK, KK + 1)), _o = _m.next(); !_o.done; _o = _m.next()) {
                var j = _o.value;
                if (X[j] % 2 === 1) {
                    X[j - KKL] = (X[j - KKL] - X[j]) & MMF;
                    X[j - KK] = (X[j - KK] - X[j]) & MMF;
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_o && !_o.done && (_d = _m.return)) _d.call(_m);
            }
            finally { if (e_4) throw e_4.error; }
        }
        if (ss & 1) {
            try {
                for (var _p = __values(arr(KK, 1)), _q = _p.next(); !_q.done; _q = _p.next()) {
                    var j = _q.value;
                    X[j + 1] = X[j];
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_q && !_q.done && (_e = _p.return)) _e.call(_p);
                }
                finally { if (e_5) throw e_5.error; }
            }
            X[1 - 1] = X[KK + 1 - 1];
            if (X[KK + 1 - 1] % 2 === 1) {
                X[LL + 1 - 1] = (X[LL + 1 - 1] - X[KK + 1 - 1]) & MMF;
            }
        }
        if (ss) {
            ss = trunc(ss / 2);
        }
        else {
            T = T - 1;
        }
    }
    var res = new Uint32Array(KK);
    res.set(X.slice(LL, KK));
    res.set(X.slice(0, LL), KK - LL);
    return res;
}
exports.TAOCP1997init = TAOCP1997init;
//# sourceMappingURL=taocp-1997-init.js.map