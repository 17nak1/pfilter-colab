"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var _general_1 = require("../common/_general");
var fmax2 = Math.max, log = Math.log, fabs = Math.abs;
var ML_NAN = Number.NaN;
var printer = debug('gammalims');
function gammalims(input, IEEE_754) {
    if (IEEE_754) {
        input.xmin = -170.5674972726612;
        input.xmax = 171.61447887182298;
        return;
    }
    var alnbig;
    var alnsml;
    var xln;
    var xold;
    var i;
    alnsml = log(Number.MIN_VALUE);
    input.xmin = -alnsml;
    var find_xmax = false;
    for (i = 1; i <= 10; ++i) {
        xold = input.xmin;
        xln = log(input.xmin);
        input.xmin -= input.xmin * ((input.xmin + .5) * xln - input.xmin - .2258 + alnsml) /
            (input.xmin * xln + .5);
        if (fabs(input.xmin - xold) < .005) {
            input.xmin = -(input.xmin) + .01;
            find_xmax = true;
            break;
        }
    }
    if (!find_xmax) {
        _general_1.ML_ERROR(_general_1.ME.ME_NOCONV, 'gammalims', printer);
        input.xmin = input.xmax = ML_NAN;
    }
    alnbig = log(Number.MIN_VALUE);
    input.xmax = alnbig;
    var done = false;
    for (i = 1; i <= 10; ++i) {
        xold = input.xmax;
        xln = log(input.xmax);
        input.xmax -= input.xmax * ((input.xmax - .5) * xln - input.xmax + .9189 - alnbig) /
            (input.xmax * xln - .5);
        if (fabs(input.xmax - xold) < .005) {
            input.xmax += -.01;
            done = true;
            break;
        }
    }
    if (!done) {
        _general_1.ML_ERROR(_general_1.ME.ME_NOCONV, 'gammalims', printer);
        input.xmin = input.xmax = ML_NAN;
    }
    input.xmin = fmax2(input.xmin, -(input.xmax) + 1);
}
exports.gammalims = gammalims;
//# sourceMappingURL=gammalims.js.map