"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var _general_1 = require("../common/_general");
var floor = Math.floor, exp = Math.exp, log = Math.log, fabs = Math.abs;
var DBL_MAX = Number.MAX_VALUE, ML_NAN = Number.NaN;
var printer_tgamma = debug('tgamma');
function tgamma(x) {
    if (x <= 0.0) {
        _general_1.ML_ERROR(_general_1.ME.ME_DOMAIN, 'gamma', printer_tgamma);
        printer_tgamma('Argument %d must be positive', x);
        return ML_NAN;
    }
    var gamma = 0.577215664901532860606512090;
    if (x < 0.001)
        return 1.0 / (x * (1.0 + gamma * x));
    if (x < 12.0) {
        var y = x;
        var n = 0;
        var arg_was_less_than_one = (y < 1.0);
        if (arg_was_less_than_one) {
            y += 1.0;
        }
        else {
            n = (floor(y)) - 1;
            y -= n;
        }
        var p = [
            -1.71618513886549492533811E+0,
            2.47656508055759199108314E+1,
            -3.79804256470945635097577E+2,
            6.29331155312818442661052E+2,
            8.66966202790413211295064E+2,
            -3.14512729688483675254357E+4,
            -3.61444134186911729807069E+4,
            6.64561438202405440627855E+4
        ];
        var q = [
            -3.08402300119738975254353E+1,
            3.15350626979604161529144E+2,
            -1.01515636749021914166146E+3,
            -3.10777167157231109440444E+3,
            2.25381184209801510330112E+4,
            4.75584627752788110767815E+3,
            -1.34659959864969306392456E+5,
            -1.15132259675553483497211E+5
        ];
        var num = 0.0;
        var den = 1.0;
        var i = void 0;
        var z = y - 1;
        for (i = 0; i < 8; i++) {
            num = (num + p[i]) * z;
            den = den * z + q[i];
        }
        var result = num / den + 1.0;
        if (arg_was_less_than_one) {
            result /= (y - 1.0);
        }
        else {
            for (i = 0; i < n; i++)
                result *= y++;
        }
        return result;
    }
    if (x > 171.624) {
        var temp = DBL_MAX;
        return temp * 2.0;
    }
    return exp(lgamma_c99(x));
}
function lgamma_c99(x) {
    if (x <= 0.0) {
        _general_1.ML_ERROR(_general_1.ME.ME_DOMAIN, 'gamma', printer_tgamma);
        printer_tgamma('Argument %f must be positive', x);
        return ML_NAN;
    }
    if (x < 12.0) {
        return log(fabs(tgamma(x)));
    }
    var c = [
        1.0 / 12.0,
        -1.0 / 360.0,
        1.0 / 1260.0,
        -1.0 / 1680.0,
        1.0 / 1188.0,
        -691.0 / 360360.0,
        1.0 / 156.0,
        -3617.0 / 122400.0
    ];
    var z = 1.0 / (x * x);
    var sum = c[7];
    for (var i = 6; i >= 0; i--) {
        sum *= z;
        sum += c[i];
    }
    var series = sum / x;
    var halfLogTwoPi = 0.91893853320467274178032973640562;
    var logGamma = (x - 0.5) * log(x) - x + halfLogTwoPi + series;
    return logGamma;
}
//# sourceMappingURL=c99_gamma.js.map