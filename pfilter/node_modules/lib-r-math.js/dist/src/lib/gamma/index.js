"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var dgamma_1 = require("./dgamma");
var pgamma_1 = require("./pgamma");
var qgamma_1 = require("./qgamma");
var rgamma_1 = require("./rgamma");
var normal_1 = require("../rng/normal");
var gamma_fn_1 = require("./gamma_fn");
var lgammafn_sign_1 = require("./lgammafn_sign");
var polygamma_1 = require("./polygamma");
exports.default = {
    digamma: polygamma_1.digamma,
    gamma: gamma_fn_1.gammafn,
    lgamma: lgammafn_sign_1.lgammafn_sign,
    pentagamma: polygamma_1.pentagamma,
    psigamma: polygamma_1.psigamma,
    tetragamma: polygamma_1.tetragamma,
    trigamma: polygamma_1.trigamma
};
var r_func_1 = require("../r-func");
var abs = Math.abs;
function Gamma(norm) {
    if (norm === void 0) { norm = new normal_1.Inversion(); }
    var printer_n = debug('gamma_normalize_params');
    function gammaNormalizeParams(rate, scale) {
        if (scale === undefined && rate === undefined) {
            return 1;
        }
        if (scale !== undefined && rate !== undefined) {
            if (abs(scale * rate - 1) >= 1e-16) {
                printer_n('Both scale:%d and rate:%d are defined but scale <> 1/rate');
                return undefined;
            }
            return scale;
        }
        if (scale !== undefined && rate === undefined) {
            return scale;
        }
        if (scale === undefined && rate !== undefined) {
            return 1 / rate;
        }
        throw new Error('unreachable code, you cant be here!');
    }
    var printer_d = debug('dgamma');
    function dgamma(x, shape, rate, scale, asLog) {
        if (asLog === void 0) { asLog = false; }
        var _scale = gammaNormalizeParams(rate, scale);
        if (_scale !== undefined) {
            return dgamma_1.dgamma(x, shape, _scale, asLog);
        }
        printer_d('Cannot normalize to [scale]');
        return NaN;
    }
    var printer_p = debug('pgamma');
    function pgamma(q, shape, rate, scale, lowerTail, logP) {
        if (lowerTail === void 0) { lowerTail = true; }
        if (logP === void 0) { logP = false; }
        var _scale = gammaNormalizeParams(rate, scale);
        if (_scale !== undefined) {
            return pgamma_1.pgamma(q, shape, _scale, lowerTail, logP);
        }
        printer_p('Cannot normalize to [scale]');
        return NaN;
    }
    var printer_q = debug('qgamma');
    function qgamma(q, shape, rate, scale, lowerTail, logP) {
        if (lowerTail === void 0) { lowerTail = true; }
        if (logP === void 0) { logP = false; }
        var _scale = gammaNormalizeParams(rate, scale);
        if (_scale !== undefined) {
            return qgamma_1.qgamma(q, shape, _scale, lowerTail, logP);
        }
        printer_q('Cannot normalize to [scale]');
        return NaN;
    }
    var printer_rgamma = debug('rgammaOne');
    function rgamma(n, shape, rate, scale) {
        return r_func_1.randomGenHelper(n, rgammaOne, shape, rate, scale);
    }
    function rgammaOne(shape, rate, scale) {
        var _scale = gammaNormalizeParams(rate, scale);
        if (_scale !== undefined) {
            return rgamma_1.rgammaOne(shape, _scale, norm);
        }
        printer_rgamma('Cannot normalize to [scale]');
        return NaN;
    }
    return Object.freeze({
        dgamma: dgamma,
        pgamma: pgamma,
        qgamma: qgamma,
        rgamma: rgamma
    });
}
exports.Gamma = Gamma;
//# sourceMappingURL=index.js.map