"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var trigonometry_1 = require("../trigonometry");
var M_PI = Math.PI, log = Math.log, exp = Math.exp, trunc = Math.trunc;
var DBL_EPSILON = Number.EPSILON, DBL_MIN = Number.MIN_VALUE, ML_POSINF = Number.POSITIVE_INFINITY;
function Rf_gamma_cody(x) {
    var sqrtpi = 0.9189385332046727417803297;
    var xbig = 171.624;
    var p = [
        -1.71618513886549492533811,
        24.7656508055759199108314,
        -379.804256470945635097577,
        629.331155312818442661052,
        866.966202790413211295064,
        -31451.2729688483675254357,
        -36144.4134186911729807069,
        66456.1438202405440627855
    ];
    var q = [
        -30.8402300119738975254353,
        315.350626979604161529144,
        -1015.15636749021914166146,
        -3107.77167157231109440444,
        22538.1184209801510330112,
        4755.84627752788110767815,
        -134659.959864969306392456,
        -115132.259675553483497211
    ];
    var c = [
        -0.001910444077728,
        8.4171387781295e-4,
        -5.952379913043012e-4,
        7.93650793500350248e-4,
        -0.002777777777777681622553,
        0.08333333333333333331554247,
        0.0057083835261
    ];
    var i;
    var n;
    var parity;
    var fact;
    var xden;
    var xnum;
    var y;
    var z;
    var yi;
    var res;
    var sum;
    var ysq;
    parity = 0;
    fact = 1;
    n = 0;
    y = x;
    if (y <= 0) {
        y = -x;
        yi = trunc(y);
        res = y - yi;
        if (res !== 0) {
            if (yi !== trunc(yi * 0.5) * 2) {
                parity = 1;
            }
            fact = -M_PI / trigonometry_1.sinpi(res);
            y += 1;
        }
        else {
            return ML_POSINF;
        }
    }
    if (y < DBL_EPSILON) {
        if (y >= DBL_MIN) {
            res = 1 / y;
        }
        else {
            return ML_POSINF;
        }
    }
    else if (y < 12) {
        yi = y;
        if (y < 1) {
            z = y;
            y += 1;
        }
        else {
            n = trunc(y) - 1;
            y -= n;
            z = y - 1;
        }
        xnum = 0;
        xden = 1;
        for (i = 0; i < 8; ++i) {
            xnum = (xnum + p[i]) * z;
            xden = xden * z + q[i];
        }
        res = xnum / xden + 1;
        if (yi < y) {
            res /= yi;
        }
        else if (yi > y) {
            for (i = 0; i < n; ++i) {
                res *= y;
                y += 1;
            }
        }
    }
    else {
        if (y <= xbig) {
            ysq = y * y;
            sum = c[6];
            for (i = 0; i < 6; ++i) {
                sum = sum / ysq + c[i];
            }
            sum = sum / y - y + sqrtpi;
            sum += (y - 0.5) * log(y);
            res = exp(sum);
        }
        else {
            return ML_POSINF;
        }
    }
    if (parity)
        res = -res;
    if (fact !== 1)
        res = fact / res;
    return res;
}
exports.Rf_gamma_cody = Rf_gamma_cody;
//# sourceMappingURL=gamma_cody.js.map