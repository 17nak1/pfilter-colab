"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var _general_1 = require("../../common/_general");
var bessel_constants_1 = require("../bessel-constants");
var M_SQRT_2dPI = 0.797884560802865355879892119869;
var min = Math.min, log = Math.log, exp = Math.exp, fabs = Math.abs, sinh = Math.sinh, trunc = Math.trunc, sqrt = Math.sqrt, max = Math.max;
var DBL_MAX = Number.MAX_VALUE, DBL_EPSILON = Number.EPSILON, DBL_MIN = Number.MIN_VALUE;
var printer = debug('K_bessel');
var ML_POSINF = Infinity;
function K_bessel(x, alpha, nb, ize) {
    var a = .11593151565841244881;
    var p = [.805629875690432845, 20.4045500205365151,
        157.705605106676174, 536.671116469207504, 900.382759291288778,
        730.923886650660393, 229.299301509425145, .822467033424113231];
    var q = [29.4601986247850434, 277.577868510221208,
        1206.70325591027438, 2762.91444159791519, 3443.74050506564618,
        2210.63190113378647, 572.267338359892221];
    var r = [-.48672575865218401848, 13.079485869097804016,
        -101.96490580880537526, 347.65409106507813131,
        3.495898124521934782e-4];
    var s = [-25.579105509976461286, 212.57260432226544008,
        -610.69018684944109624, 422.69668805777760407];
    var t = [1.6125990452916363814e-10,
        2.5051878502858255354e-8, 2.7557319615147964774e-6,
        1.9841269840928373686e-4, .0083333333333334751799,
        .16666666666666666446];
    var estm = [52.0583, 5.7607, 2.7782, 14.4303, 185.3004, 9.3715];
    var estf = [41.8341, 7.1075, 6.4306, 42.511, 1.35633, 84.5096, 20.];
    var iend;
    var i;
    var j;
    var k;
    var m;
    var ii;
    var mplus1;
    var x2by4;
    var twox;
    var c;
    var blpha;
    var ratio;
    var wminf;
    var d1;
    var d2;
    var d3;
    var f0;
    var f1;
    var f2;
    var p0;
    var q0;
    var t1;
    var t2;
    var twonu;
    var dm;
    var ex;
    var bk1;
    var bk2;
    var nu;
    var bk = new Array(nb).fill(0);
    ii = 0;
    ex = x;
    nu = alpha;
    var ncalc = min(nb, 0) - 2;
    if (nb > 0 && (0. <= nu && nu < 1.) && (1 <= ize && ize <= 2)) {
        for (var cnt = 0; cnt < 1; cnt++) {
            if (ex <= 0 || (ize === 1 && ex > bessel_constants_1.xmax_BESS_K)) {
                if (ex <= 0) {
                    if (ex < 0)
                        _general_1.ML_ERROR(_general_1.ME.ME_RANGE, 'K_bessel', printer);
                    bk[0] = ML_POSINF;
                }
                else
                    bk[0] = 0.;
                ncalc = nb;
                return { x: bk[0], nb: nb, ncalc: ncalc };
            }
            k = 0;
            if (nu < bessel_constants_1.sqxmin_BESS_K) {
                nu = 0.;
            }
            else if (nu > .5) {
                k = 1;
                nu -= 1.;
            }
            twonu = nu + nu;
            iend = nb + k - 1;
            c = nu * nu;
            d3 = -c;
            if (ex <= 1.) {
                d1 = 0.;
                d2 = p[0];
                t1 = 1.;
                t2 = q[0];
                for (i = 2; i <= 7; i += 2) {
                    d1 = c * d1 + p[i - 1];
                    d2 = c * d2 + p[i];
                    t1 = c * t1 + q[i - 1];
                    t2 = c * t2 + q[i];
                }
                d1 = nu * d1;
                t1 = nu * t1;
                f1 = log(ex);
                f0 = a + nu * (p[7] - nu * (d1 + d2) / (t1 + t2)) - f1;
                q0 = exp(-nu * (a - nu * (p[7] + nu * (d1 - d2) / (t1 - t2)) - f1));
                f1 = nu * f0;
                p0 = exp(f1);
                d1 = r[4];
                t1 = 1.;
                for (i = 0; i < 4; ++i) {
                    d1 = c * d1 + r[i];
                    t1 = c * t1 + s[i];
                }
                if (fabs(f1) <= .5) {
                    f1 *= f1;
                    d2 = 0.;
                    for (i = 0; i < 6; ++i) {
                        d2 = f1 * d2 + t[i];
                    }
                    d2 = f0 + f0 * f1 * d2;
                }
                else {
                    d2 = sinh(f1) / nu;
                }
                f0 = d2 - nu * d1 / (t1 * p0);
                if (ex <= 1e-10) {
                    bk[0] = f0 + ex * f0;
                    if (ize === 1) {
                        bk[0] -= ex * bk[0];
                    }
                    ratio = p0 / f0;
                    c = ex * DBL_MAX;
                    if (k !== 0) {
                        ncalc = -1;
                        if (bk[0] >= c / ratio) {
                            return { x: bk[nb - 1], nb: nb, ncalc: ncalc };
                        }
                        bk[0] = ratio * bk[0] / ex;
                        twonu += 2.;
                        ratio = twonu;
                    }
                    ncalc = 1;
                    if (nb === 1)
                        return { x: bk[nb - 1], nb: nb, ncalc: ncalc };
                    ncalc = -1;
                    for (i = 1; i < nb; ++i) {
                        if (ratio >= c)
                            return { x: bk[nb - 1], nb: nb, ncalc: ncalc };
                        bk[i] = ratio / ex;
                        twonu += 2.;
                        ratio = twonu;
                    }
                    ncalc = 1;
                    break;
                }
                else {
                    c = 1.;
                    x2by4 = ex * ex / 4.;
                    p0 = .5 * p0;
                    q0 = .5 * q0;
                    d1 = -1.;
                    d2 = 0.;
                    bk1 = 0.;
                    bk2 = 0.;
                    f1 = f0;
                    f2 = p0;
                    do {
                        d1 += 2.;
                        d2 += 1.;
                        d3 = d1 + d3;
                        c = x2by4 * c / d2;
                        f0 = (d2 * f0 + p0 + q0) / d3;
                        p0 /= d2 - nu;
                        q0 /= d2 + nu;
                        t1 = c * f0;
                        t2 = c * (p0 - d2 * f0);
                        bk1 += t1;
                        bk2 += t2;
                    } while (fabs(t1 / (f1 + bk1)) > DBL_EPSILON ||
                        fabs(t2 / (f2 + bk2)) > DBL_EPSILON);
                    bk1 = f1 + bk1;
                    bk2 = 2. * (f2 + bk2) / ex;
                    if (ize === 2) {
                        d1 = exp(ex);
                        bk1 *= d1;
                        bk2 *= d1;
                    }
                    wminf = estf[0] * ex + estf[1];
                }
            }
            else if (DBL_EPSILON * ex > 1.) {
                ncalc = nb;
                bk1 = 1. / (M_SQRT_2dPI * sqrt(ex));
                return { x: bk1, nb: nb, ncalc: ncalc };
            }
            else {
                twox = ex + ex;
                blpha = 0.;
                ratio = 0.;
                if (ex <= 4.) {
                    d2 = trunc(estm[0] / ex + estm[1]);
                    m = trunc(d2);
                    d1 = d2 + d2;
                    d2 -= .5;
                    d2 *= d2;
                    for (i = 2; i <= m; ++i) {
                        d1 -= 2.;
                        d2 -= d1;
                        ratio = (d3 + d2) / (twox + d1 - ratio);
                    }
                    d2 = trunc(estm[2] * ex + estm[3]);
                    m = trunc(d2);
                    c = fabs(nu);
                    d3 = c + c;
                    d1 = d3 - 1.;
                    f1 = DBL_MIN;
                    f0 = (2. * (c + d2) / ex + .5 * ex / (c + d2 + 1.)) * DBL_MIN;
                    for (i = 3; i <= m; ++i) {
                        d2 -= 1.;
                        f2 = (d3 + d2 + d2) * f0;
                        blpha = (1. + d1 / d2) * (f2 + blpha);
                        f2 = f2 / ex + f1;
                        f1 = f0;
                        f0 = f2;
                    }
                    f1 = (d3 + 2.) * f0 / ex + f1;
                    d1 = 0.;
                    t1 = 1.;
                    for (i = 1; i <= 7; ++i) {
                        d1 = c * d1 + p[i - 1];
                        t1 = c * t1 + q[i - 1];
                    }
                    p0 = exp(c * (a + c * (p[7] - c * d1 / t1) - log(ex))) / ex;
                    f2 = (c + .5 - ratio) * f1 / ex;
                    bk1 = p0 + (d3 * f0 - f2 + f0 + blpha) / (f2 + f1 + f0) * p0;
                    if (ize === 1) {
                        bk1 *= exp(-ex);
                    }
                    wminf = estf[2] * ex + estf[3];
                }
                else {
                    dm = trunc(estm[4] / ex + estm[5]);
                    m = trunc(dm);
                    d2 = dm - .5;
                    d2 *= d2;
                    d1 = dm + dm;
                    for (i = 2; i <= m; ++i) {
                        dm -= 1.;
                        d1 -= 2.;
                        d2 -= d1;
                        ratio = (d3 + d2) / (twox + d1 - ratio);
                        blpha = (ratio + ratio * blpha) / dm;
                    }
                    bk1 = 1. / ((M_SQRT_2dPI + M_SQRT_2dPI * blpha) * sqrt(ex));
                    if (ize === 1)
                        bk1 *= exp(-ex);
                    wminf = estf[4] * (ex - fabs(ex - estf[6])) + estf[5];
                }
                bk2 = bk1 + bk1 * (nu + .5 - ratio) / ex;
            }
            ncalc = nb;
            bk[0] = bk1;
            if (iend === 0)
                return { x: bk[nb - 1], nb: nb, ncalc: ncalc };
            j = 1 - k;
            if (j >= 0)
                bk[j] = bk2;
            if (iend === 1)
                return { x: bk[nb - 1], nb: nb, ncalc: ncalc };
            m = min(trunc(wminf - nu), iend);
            for (i = 2; i <= m; ++i) {
                t1 = bk1;
                bk1 = bk2;
                twonu += 2.;
                if (ex < 1.) {
                    if (bk1 >= DBL_MAX / twonu * ex)
                        break;
                }
                else {
                    if (bk1 / ex >= DBL_MAX / twonu)
                        break;
                }
                bk2 = twonu / ex * bk1 + t1;
                ii = i;
                ++j;
                if (j >= 0) {
                    bk[j] = bk2;
                }
            }
            m = ii;
            if (m === iend) {
                return { x: bk[nb - 1], nb: nb, ncalc: ncalc };
            }
            ratio = bk2 / bk1;
            mplus1 = m + 1;
            ncalc = -1;
            for (i = mplus1; i <= iend; ++i) {
                twonu += 2.;
                ratio = twonu / ex + 1. / ratio;
                ++j;
                if (j >= 1) {
                    bk[j] = ratio;
                }
                else {
                    if (bk2 >= DBL_MAX / ratio)
                        return { x: bk[nb - 1], nb: nb, ncalc: ncalc };
                    bk2 *= ratio;
                }
            }
            ncalc = max(1, mplus1 - k);
            if (ncalc === 1)
                bk[0] = bk2;
            if (nb === 1) {
                return { x: bk2, nb: nb, ncalc: ncalc };
            }
        }
        for (i = ncalc; i < nb; ++i) {
            bk[i] *= bk[i - 1];
            (ncalc)++;
        }
    }
    return { x: bk[nb - 1], nb: nb, ncalc: ncalc };
}
exports.K_bessel = K_bessel;
//# sourceMappingURL=Kbessel.js.map