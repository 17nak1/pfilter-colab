"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var _general_1 = require("../common/_general");
var dbinom_1 = require("../binomial/dbinom");
var printer = debug('dhyper');
var R_forceint = Math.round;
var ISNAN = Number.isNaN;
function dhyper(x, r, b, n, give_log) {
    if (give_log === void 0) { give_log = false; }
    var p;
    var q;
    var p1;
    var p2;
    var p3;
    if (ISNAN(x) || ISNAN(r) || ISNAN(b) || ISNAN(n))
        return x + r + b + n;
    if (_general_1.R_D_negInonint(r) ||
        _general_1.R_D_negInonint(b) ||
        _general_1.R_D_negInonint(n) ||
        n > r + b)
        return _general_1.ML_ERR_return_NAN(printer);
    if (x < 0)
        return _general_1.R_D__0(give_log);
    var rc = _general_1.R_D_nonint_check(give_log, x, printer);
    if (rc !== undefined) {
        return rc;
    }
    x = R_forceint(x);
    r = R_forceint(r);
    b = R_forceint(b);
    n = R_forceint(n);
    if (n < x || r < x || n - x > b)
        return _general_1.R_D__0(give_log);
    if (n === 0)
        return x === 0 ? _general_1.R_D__1(give_log) : _general_1.R_D__0(give_log);
    p = n / (r + b);
    q = (r + b - n) / (r + b);
    p1 = dbinom_1.dbinom_raw(x, r, p, q, give_log);
    p2 = dbinom_1.dbinom_raw(n - x, b, p, q, give_log);
    p3 = dbinom_1.dbinom_raw(n, r + b, p, q, give_log);
    return give_log ? p1 + p2 - p3 : p1 * p2 / p3;
}
exports.dhyper = dhyper;
//# sourceMappingURL=dhyper.js.map