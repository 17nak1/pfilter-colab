"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var _general_1 = require("../common/_general");
var ISNAN = Number.isNaN, R_FINITE = Number.isFinite;
var floor = Math.floor, log = Math.log;
var pbeta_1 = require("../beta/pbeta");
var toms708_1 = require("../common/toms708");
var printer = debug('pnbinom');
function pnbinom(xx, size, prob, lowerTail, logP) {
    var fx = Array.isArray(xx) ? xx : [xx];
    var result = fx.map(function (x) {
        if (ISNAN(x) || ISNAN(size) || ISNAN(prob))
            return x + size + prob;
        if (!R_FINITE(size) || !R_FINITE(prob)) {
            return _general_1.ML_ERR_return_NAN(printer);
        }
        if (size < 0 || prob <= 0 || prob > 1) {
            return _general_1.ML_ERR_return_NAN(printer);
        }
        if (size === 0)
            return x >= 0 ? _general_1.R_DT_1(lowerTail, logP) : _general_1.R_DT_0(lowerTail, logP);
        if (x < 0)
            return _general_1.R_DT_0(lowerTail, logP);
        if (!R_FINITE(x))
            return _general_1.R_DT_1(lowerTail, logP);
        x = floor(x + 1e-7);
        return pbeta_1.pbeta(prob, size, x + 1, lowerTail, logP);
    });
    return result.length === 1 ? result[0] : result;
}
exports.pnbinom = pnbinom;
var printer_pnbinom_mu = debug('printer_pnbinom_mu');
function pnbinom_mu(xx, size, mu, lowerTail, logP) {
    var fx = Array.isArray(xx) ? xx : [xx];
    var result = fx.map(function (x) {
        if (ISNAN(x) || ISNAN(size) || ISNAN(mu))
            return x + size + mu;
        if (!R_FINITE(size) || !R_FINITE(mu))
            return _general_1.ML_ERR_return_NAN(printer_pnbinom_mu);
        if (size < 0 || mu < 0)
            return _general_1.ML_ERR_return_NAN(printer_pnbinom_mu);
        if (size === 0)
            return x >= 0 ? _general_1.R_DT_1(lowerTail, logP) : _general_1.R_DT_0(lowerTail, logP);
        if (x < 0)
            return _general_1.R_DT_0(lowerTail, logP);
        if (!R_FINITE(x))
            return _general_1.R_DT_1(lowerTail, logP);
        x = floor(x + 1e-7);
        {
            var ierr = new toms708_1.NumberW(0);
            var w = new toms708_1.NumberW(0);
            var wc = new toms708_1.NumberW(0);
            toms708_1.Toms708.bratio(size, x + 1, size / (size + mu), mu / (size + mu), w, wc, ierr);
            if (ierr)
                printer('pnbinom_mu() -> bratio() gave error code %d', ierr.val);
            if (logP) {
                w.val = log(w.val);
                wc.val = log(wc.val);
            }
            return lowerTail ? w.val : wc.val;
        }
    });
    return result.length === 1 ? result[0] : result;
}
exports.pnbinom_mu = pnbinom_mu;
//# sourceMappingURL=pnbinom.js.map