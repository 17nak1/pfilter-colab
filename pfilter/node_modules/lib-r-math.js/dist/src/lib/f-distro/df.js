"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var _general_1 = require("../common/_general");
var dbinom_1 = require("../binomial/dbinom");
var dgamma_1 = require("../gamma/dgamma");
var log = Math.log;
var ISNAN = Number.isNaN, R_FINITE = Number.isFinite, ML_POSINF = Number.POSITIVE_INFINITY;
var printer_df = debug('df');
function df(x, m, n, giveLog) {
    if (giveLog === void 0) { giveLog = false; }
    var p;
    var q;
    var f;
    var dens;
    if (ISNAN(x) || ISNAN(m) || ISNAN(n)) {
        return x + m + n;
    }
    if (m <= 0 || n <= 0) {
        return _general_1.ML_ERR_return_NAN(printer_df);
    }
    if (x < 0) {
        return _general_1.R_D__0(giveLog);
    }
    if (x === 0) {
        return m > 2 ? _general_1.R_D__0(giveLog) : m === 2 ? _general_1.R_D__1(giveLog) : ML_POSINF;
    }
    if (!R_FINITE(m) && !R_FINITE(n)) {
        if (x === 1) {
            return ML_POSINF;
        }
        else {
            return _general_1.R_D__0(giveLog);
        }
    }
    if (!R_FINITE(n)) {
        return dgamma_1.dgamma(x, m / 2, 2 / m, giveLog);
    }
    if (m > 1e14) {
        dens = dgamma_1.dgamma(1 / x, n / 2, 2 / n, giveLog);
        return giveLog ? dens - 2 * log(x) : dens / (x * x);
    }
    f = 1 / (n + x * m);
    q = n * f;
    p = x * m * f;
    if (m >= 2) {
        f = m * q / 2;
        dens = dbinom_1.dbinom_raw((m - 2) / 2, (m + n - 2) / 2, p, q, giveLog);
    }
    else {
        f = m * m * q / (2 * p * (m + n));
        dens = dbinom_1.dbinom_raw(m / 2, (m + n) / 2, p, q, giveLog);
    }
    return giveLog ? log(f) + dens : f * dens;
}
exports.df = df;
//# sourceMappingURL=df.js.map