"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var _general_1 = require("../common/_general");
var qnbeta_1 = require("../beta/qnbeta");
var qnchisq_1 = require("../chi-2/qnchisq");
var ISNAN = Number.isNaN, R_FINITE = Number.isFinite, ML_POSINF = Number.POSITIVE_INFINITY;
var printer = debug('qnf');
function qnf(p, df1, df2, ncp, lowerTail, logP) {
    if (lowerTail === void 0) { lowerTail = true; }
    if (logP === void 0) { logP = false; }
    var y;
    if (ISNAN(p) || ISNAN(df1) || ISNAN(df2) || ISNAN(ncp))
        return p + df1 + df2 + ncp;
    switch (true) {
        case df1 <= 0 || df2 <= 0 || ncp < 0:
        case !R_FINITE(ncp):
        case !R_FINITE(df1) && !R_FINITE(df2):
            return _general_1.ML_ERR_return_NAN(printer);
        default:
            break;
    }
    var rc = _general_1.R_Q_P01_boundaries(lowerTail, logP, p, 0, ML_POSINF);
    if (rc !== undefined) {
        return rc;
    }
    if (df2 > 1e8)
        return qnchisq_1.qnchisq(p, df1, ncp, lowerTail, logP) / df1;
    y = qnbeta_1.qnbeta(p, df1 / 2, df2 / 2, ncp, lowerTail, logP);
    return y / (1 - y) * (df2 / df1);
}
exports.qnf = qnf;
//# sourceMappingURL=qnf.js.map