"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var _general_1 = require("../common/_general");
var dnbeta_1 = require("../beta/dnbeta");
var dnchisq_1 = require("../chi-2/dnchisq");
var dgamma_1 = require("../gamma/dgamma");
var log1p = Math.log1p, log = Math.log;
var R_FINITE = Number.isFinite, ISNAN = Number.isNaN, ML_POSINF = Number.POSITIVE_INFINITY;
var printer = debug('dnf');
function dnf(x, df1, df2, ncp, giveLog) {
    var y;
    var z;
    var f;
    if (ISNAN(x) || ISNAN(df1) || ISNAN(df2) || ISNAN(ncp)) {
        return x + df2 + df1 + ncp;
    }
    if (df1 <= 0 || df2 <= 0 || ncp < 0) {
        return _general_1.ML_ERR_return_NAN(printer);
    }
    if (x < 0) {
        return _general_1.R_D__0(giveLog);
    }
    if (!R_FINITE(ncp)) {
        return _general_1.ML_ERR_return_NAN(printer);
    }
    if (!R_FINITE(df1) && !R_FINITE(df2)) {
        if (x === 1)
            return ML_POSINF;
        else
            return _general_1.R_D__0(giveLog);
    }
    if (!R_FINITE(df2))
        return df1 * dnchisq_1.dnchisq(x * df1, df1, ncp, giveLog);
    if (df1 > 1e14 && ncp < 1e7) {
        f =
            1 +
                ncp / df1;
        z = dgamma_1.dgamma(1 / x / f, df2 / 2, 2 / df2, giveLog);
        return giveLog ? z - 2 * log(x) - log(f) : z / (x * x) / f;
    }
    y = df1 / df2 * x;
    z = dnbeta_1.dnbeta(y / (1 + y), df1 / 2, df2 / 2, ncp, giveLog);
    return giveLog
        ? z + log(df1) - log(df2) - 2 * log1p(y)
        : z * (df1 / df2) / (1 + y) / (1 + y);
}
exports.dnf = dnf;
//# sourceMappingURL=dnf.js.map