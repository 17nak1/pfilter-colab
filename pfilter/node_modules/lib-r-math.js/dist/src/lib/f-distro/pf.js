"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var _general_1 = require("../common/_general");
var pbeta_1 = require("../beta/pbeta");
var pchisq_1 = require("../chi-2/pchisq");
var ISNAN = Number.isNaN, ML_POSINF = Number.POSITIVE_INFINITY, ML_NAN = Number.NaN, ML_VALID = Number.isFinite;
var M_LN2 = Math.LN2;
var printer_pf = debug('pf');
function pf(q, df1, df2, lowerTail, logP) {
    if (lowerTail === void 0) { lowerTail = true; }
    if (logP === void 0) { logP = false; }
    if (ISNAN(q) || ISNAN(df1) || ISNAN(df2))
        return q + df2 + df1;
    if (df1 <= 0 || df2 <= 0) {
        return _general_1.ML_ERR_return_NAN(printer_pf);
    }
    var rc = _general_1.R_P_bounds_01(lowerTail, logP, q, 0, ML_POSINF);
    if (rc !== undefined) {
        return rc;
    }
    if (df2 === ML_POSINF) {
        if (df1 === ML_POSINF) {
            if (q < 1)
                return _general_1.R_DT_0(lowerTail, logP);
            if (q === 1)
                return logP ? -M_LN2 : 0.5;
            if (q > 1)
                return _general_1.R_DT_1(lowerTail, logP);
        }
        return pchisq_1.pchisq(q * df1, df1, lowerTail, logP);
    }
    if (df1 === ML_POSINF)
        return pchisq_1.pchisq(df2 / q, df2, !lowerTail, logP);
    if (df1 * q > df2)
        q = pbeta_1.pbeta(df2 / (df2 + df1 * q), df2 / 2, df1 / 2, !lowerTail, logP);
    else
        q = pbeta_1.pbeta(df1 * q / (df2 + df1 * q), df1 / 2, df2 / 2, lowerTail, logP);
    return ML_VALID(q) ? q : ML_NAN;
}
exports.pf = pf;
//# sourceMappingURL=pf.js.map