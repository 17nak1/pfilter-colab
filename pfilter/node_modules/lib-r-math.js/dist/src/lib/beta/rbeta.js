"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var _general_1 = require("../common/_general");
var r_func_1 = require("../r-func");
var M_LN2 = Math.LN2, log = Math.log, fmin2 = Math.min, fmax2 = Math.max, exp = Math.exp, sqrt = Math.sqrt;
var DBL_MAX = Number.MAX_VALUE, R_FINITE = Number.isFinite;
var printer = debug('rbeta');
exports.expmax = _general_1.DBL_MAX_EXP * M_LN2;
function rbeta(n, aa, bb, rng) {
    return r_func_1.randomGenHelper(n, rbetaOne, aa, bb, rng);
}
exports.rbeta = rbeta;
function rbetaOne(aa, bb, rng) {
    if (aa < 0 || bb < 0) {
        return _general_1.ML_ERR_return_NAN(printer);
    }
    if (!R_FINITE(aa) && !R_FINITE(bb))
        return 0.5;
    if (aa === 0 && bb === 0)
        return rng.unif_rand() < 0.5 ? 0 : 1;
    if (!R_FINITE(aa) || bb === 0)
        return 1.0;
    if (!R_FINITE(bb) || aa === 0)
        return 0.0;
    var a;
    var b;
    var alpha;
    var r;
    var s;
    var t;
    var u1 = 0;
    var u2;
    var v = 0;
    var w = 0;
    var y;
    var z;
    var qsame;
    var beta = 0;
    var gamma = 0;
    var delta;
    var k1 = 0;
    var k2 = 0;
    var olda = -1.0;
    var oldb = -1.0;
    qsame = olda === aa && oldb === bb;
    if (!qsame) {
        olda = aa;
        oldb = bb;
    }
    a = fmin2(aa, bb);
    b = fmax2(aa, bb);
    alpha = a + b;
    function v_w_from__u1_bet(AA) {
        v = beta * log(u1 / (1.0 - u1));
        if (v <= exports.expmax) {
            w = AA * exp(v);
            if (!R_FINITE(w)) {
                w = DBL_MAX;
            }
        }
        else {
            w = DBL_MAX;
        }
    }
    if (a <= 1.0) {
        if (!qsame) {
            beta = 1.0 / a;
            delta = 1.0 + b - a;
            k1 = delta * (0.0138889 + 0.0416667 * a) / (b * beta - 0.777778);
            k2 = 0.25 + (0.5 + 0.25 / delta) * a;
        }
        for (;;) {
            u1 = rng.unif_rand();
            u2 = rng.unif_rand();
            if (u1 < 0.5) {
                y = u1 * u2;
                z = u1 * y;
                if (0.25 * u2 + z - y >= k1)
                    continue;
            }
            else {
                z = u1 * u1 * u2;
                if (z <= 0.25) {
                    v_w_from__u1_bet(b);
                    break;
                }
                if (z >= k2)
                    continue;
            }
            v_w_from__u1_bet(b);
            if (alpha * (log(alpha / (a + w)) + v) - 1.3862944 >= log(z))
                break;
        }
        return aa === a ? a / (a + w) : w / (a + w);
    }
    else {
        if (!qsame) {
            beta = sqrt((alpha - 2.0) / (2.0 * a * b - alpha));
            gamma = a + 1.0 / beta;
        }
        do {
            u1 = rng.unif_rand();
            u2 = rng.unif_rand();
            v_w_from__u1_bet(a);
            z = u1 * u1 * u2;
            r = gamma * v - 1.3862944;
            s = a + r - w;
            if (s + 2.609438 >= 5.0 * z)
                break;
            t = log(z);
            if (s > t)
                break;
        } while (r + alpha * log(alpha / (b + w)) < t);
        return aa !== a ? b / (b + w) : w / (b + w);
    }
}
exports.rbetaOne = rbetaOne;
//# sourceMappingURL=rbeta.js.map